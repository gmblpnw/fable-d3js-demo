// ts2fable 0.8.0
module rec CytoscapeRoot
open System
open Fable.Core
open Fable.Core.JsInterop
open Browser.Types
open Fable.Core.JS

#nowarn "3390" // disable warnings for invalid XML comments
#nowarn "0044" // disable warnings for `Obsolete` usage
 

type Array<'T> = System.Collections.Generic.IList<'T>

let [<Import("*","cytoscape")>] cytoscape: Cytoscape.IExports = jsNative
module Cytoscape =

    type [<AllowNullLiteral>] IExports =
        abstract cytoscape: ?options: Cytoscape.CytoscapeOptions -> Cytoscape.Core
        abstract cytoscape: extensionName: string * foo: string * bar: obj option -> Cytoscape.Core


    type [<AllowNullLiteral>] Position =
        abstract x: float with get, set
        abstract y: float with get, set

    type CssStyleDeclaration =
        obj option

    type [<AllowNullLiteral>] ElementDefinition =
        abstract group: ElementGroup option with get, set
        abstract data: U2<NodeDataDefinition, EdgeDataDefinition> with get, set
        /// Scratchpad data (usually temp or nonserialisable data)
        abstract scratch: Scratchpad option with get, set
        /// The model position of the node (optional on init, mandatory after)
        abstract position: Position option with get, set
        /// can alternatively specify position in rendered on-screen pixels
        abstract renderedPosition: Position option with get, set
        /// Whether the element is selected (default false)
        abstract selected: bool option with get, set
        /// Whether the selection state is mutable (default true)
        abstract selectable: bool option with get, set
        /// When locked a node's position is immutable (default false)
        abstract locked: bool option with get, set
        /// Wether the node can be grabbed and moved by the user
        abstract grabbable: bool option with get, set
        /// a space separated list of class names that the element has
        abstract classes: string option with get, set
        /// CssStyleDeclaration;
        abstract style: CssStyleDeclaration option with get, set
        /// <summary>you should only use <c>style</c>/<c>css</c> for very special cases; use classes instead</summary>
        abstract css: U2<Css.Node, Css.Edge> option with get, set

    type [<AllowNullLiteral>] ElementDataDefinition =
        /// elided id => autogenerated id
        abstract id: string option with get, set
        abstract position: Position option with get, set

    type [<AllowNullLiteral>] EdgeDefinition =
        inherit ElementDefinition
        abstract data: EdgeDataDefinition with get, set

    type [<AllowNullLiteral>] EdgeDataDefinition =
        inherit ElementDataDefinition
        /// elided id => autogenerated id
        abstract id: string option with get, set
        /// the source node id (edge comes from this node)
        abstract source: string with get, set
        /// the target node id (edge goes to this node)
        abstract target: string with get, set
        [<EmitIndexer>] abstract Item: key: string -> obj option with get, set

    type [<AllowNullLiteral>] NodeDefinition =
        inherit ElementDefinition
        abstract data: NodeDataDefinition with get, set

    type [<AllowNullLiteral>] NodeDataDefinition =
        inherit ElementDataDefinition
        /// elided id => autogenerated id
        abstract id: string option with get, set
        abstract parent: string option with get, set
        [<EmitIndexer>] abstract Item: key: string -> obj option with get, set

    type [<AllowNullLiteral>] CytoscapeOptions =
        /// A HTML DOM element in which the graph should be rendered.
        /// This is optional if Cytoscape.js is run headlessly or if you initialise using jQuery (in which case your jQuery object already has an associated DOM element).
        /// 
        /// The default is undefined.
        abstract container: HTMLElement option with get, set
        /// An array of [[Elements]] specified as plain objects. For convenience, this option can alternatively be specified as a promise that resolves to the elements JSON.
        abstract elements: U4<ElementsDefinition, ResizeArray<ElementDefinition>, Promise<ElementsDefinition>, Promise<ResizeArray<ElementDefinition>>> option with get, set
        /// The [[Stylesheet]] used to style the graph. For convenience, this option can alternatively be specified as a promise that resolves to the stylesheet.
        abstract style: U2<ResizeArray<Stylesheet>, Promise<ResizeArray<Stylesheet>>> option with get, set
        /// A plain object that specifies layout options.
        /// Which layout is initially run is specified by the name field.
        /// Refer to a layout's documentation for the options it supports.
        /// If you want to specify your node positions yourself in your elements JSON,
        /// you can use the preset layout — by default it does not set any positions,
        /// leaving your nodes in their current positions
        /// (e.g. specified in options.elements at initialisation time)
        abstract layout: LayoutOptions option with get, set
        /// A plain object that contains graph-level data (i.e. data that does not belong to any particular node or edge).
        abstract data: Record<string, obj option> option with get, set
        /// The initial zoom level of the graph.
        /// Make sure to disable viewport manipulation options, such as fit, in your layout so that it is not overridden when the layout is applied.
        /// You can set options.minZoom and options.maxZoom to set restrictions on the zoom level.
        /// 
        /// The default value is 1.
        abstract zoom: float option with get, set
        /// The initial panning position of the graph. Make sure to disable viewport manipulation options, such as fit,
        /// in your layout so that it is not overridden when the layout is applied.
        abstract pan: Position option with get, set
        /// A minimum bound on the zoom level of the graph. The viewport can not be scaled smaller than this zoom level.
        /// 
        /// The default value is 1e-50.
        abstract minZoom: float option with get, set
        /// A maximum bound on the zoom level of the graph. The viewport can not be scaled larger than this zoom level.
        /// 
        /// The default value is 1e50.
        abstract maxZoom: float option with get, set
        /// Whether zooming the graph is enabled, both by user events and programmatically.
        /// 
        /// The default value is true.
        abstract zoomingEnabled: bool option with get, set
        /// Whether user events (e.g. mouse wheel, pinch-to-zoom) are allowed to zoom the graph. Programmatic changes to zoom are unaffected by this option.
        /// 
        /// The default value is true.
        abstract userZoomingEnabled: bool option with get, set
        /// Whether panning the graph is enabled, both by user events and programmatically.
        /// 
        /// The default value is true.
        abstract panningEnabled: bool option with get, set
        /// Whether user events (e.g. dragging the graph background) are allowed to pan the graph. Programmatic changes to pan are unaffected by this option.
        /// 
        /// The default value is true.
        abstract userPanningEnabled: bool option with get, set
        /// Whether box selection (i.e. drag a box overlay around, and release it to select) is enabled. If enabled, the user must taphold to pan the graph.
        /// 
        /// The default value is false.
        abstract boxSelectionEnabled: bool option with get, set
        /// A string indicating the selection behaviour from user input.
        /// By default, this is set automatically for you based on the type of input device detected.
        /// On touch devices, 'additive' is default — a new selection made by the user adds to the set of currenly selected elements.
        /// On mouse-input devices, 'single' is default — a new selection made by the user becomes the entire set of currently selected elements (i.e. the previous elements are unselected).
        /// 
        /// The default value is (isTouchDevice ? 'additive' : 'single').
        abstract selectionType: SelectionType option with get, set
        /// A nonnegative integer that indicates the maximum allowable distance that a user may move during a tap gesture,
        /// on touch devices and desktop devices respectively.
        /// 
        /// This makes tapping easier for users.
        /// These values have sane defaults, so it is not advised to change these options unless you have very good reason for doing so.
        /// Larger values will almost certainly have undesirable consequences.
        /// 
        /// The default value is is 8.
        abstract touchTapThreshold: float option with get, set
        /// A nonnegative integer that indicates the maximum allowable distance that a user may move during a tap gesture,
        /// on touch devices and desktop devices respectively.
        /// 
        /// This makes tapping easier for users.
        /// These values have sane defaults,
        /// so it is not advised to change these options unless you have very good reason for doing so.
        /// Larger values will almost certainly have undesirable consequences.
        /// 
        /// The default value is 4.
        abstract desktopTapThreshold: float option with get, set
        /// Whether nodes should be locked (not draggable at all) by default (if true, overrides individual node state).
        /// 
        /// The default value is false.
        abstract autolock: bool option with get, set
        /// Whether nodes should be ungrabified (not grabbable by user) by default (if true, overrides individual node state).
        /// 
        /// The default value is false.
        abstract autoungrabify: bool option with get, set
        /// Whether nodes should be unselectified (immutable selection state) by default (if true, overrides individual element state).
        /// 
        /// The default value is false.
        abstract autounselectify: bool option with get, set
        /// A convenience option that initialises the Core to run headlessly.
        /// You do not need to set this in environments that are implicitly headless (e.g. Node.js).
        /// However, it is handy to set headless: true if you want a headless Core in a browser.
        /// 
        /// The default value is false.
        abstract headless: bool option with get, set
        /// A boolean that indicates whether styling should be used.
        /// For headless (i.e. outside the browser) environments,
        /// display is not necessary and so neither is styling necessary — thereby speeding up your code.
        /// You can manually enable styling in headless environments if you require it for a special case.
        /// Note that it does not make sense to disable style if you plan on rendering the graph.
        /// 
        /// The default value is true.
        abstract styleEnabled: bool option with get, set
        /// When set to true, the renderer does not render edges while the viewport is being manipulated.
        /// This makes panning, zooming, dragging, et cetera more responsive for large graphs.
        /// 
        /// The default value is false.
        abstract hideEdgesOnViewport: bool option with get, set
        /// when set to true, the renderer does not render labels while the viewport is being manipulated.
        /// This makes panning, zooming, dragging, et cetera more responsive for large graphs.
        /// 
        /// The default value is false.
        abstract hideLabelsOnViewport: bool option with get, set
        /// When set to true, the renderer uses a texture (if supported) during panning and zooming instead of drawing the elements,
        /// making large graphs more responsive.
        /// 
        /// The default value is false.
        abstract textureOnViewport: bool option with get, set
        /// When set to true, the renderer will use a motion blur effect to make the transition between frames seem smoother.
        /// This can significantly increase the perceived performance for a large graphs.
        /// 
        /// The default value is false.
        abstract motionBlur: bool option with get, set
        /// When motionBlur: true, this value controls the opacity of motion blur frames.
        /// Higher values make the motion blur effect more pronounced.
        /// 
        /// The default value is 0.2.
        abstract motionBlurOpacity: float option with get, set
        /// Changes the scroll wheel sensitivity when zooming. This is a multiplicative modifier.
        /// So, a value between 0 and 1 reduces the sensitivity (zooms slower), and a value greater than 1 increases the sensitivity (zooms faster).
        /// 
        /// The default value is 1.
        abstract wheelSensitivity: float option with get, set
        /// Overrides the screen pixel ratio with a manually set value (1.0 or 0.666 recommended, if set).
        /// This can be used to increase performance on high density displays by reducing the effective area that needs to be rendered.
        /// If you want to use the hardware's actual pixel ratio at the expense of performance, you can set pixelRatio: 'auto'.
        /// 
        /// The default value is 1.
        abstract pixelRatio: U2<float, string> option with get, set

    /// <summary>
    /// cy   --&gt; Cy.Core
    ///   The core object is your interface to a graph.
    /// 
    /// It is your entry point to Cytoscape.js:
    /// All of the library’s features are accessed through this object.
    /// <see href="http://js.cytoscape.org/#core" />
    /// </summary>
    type [<AllowNullLiteral>] Core =
        inherit CoreGraphManipulation
        inherit CoreData
        inherit CoreGraphManipulationExt
        inherit CoreEvents
        inherit CoreViewportManipulation
        inherit CoreAnimation
        inherit CoreLayout
        inherit CoreStyle
        inherit CoreExport

    /// <summary>
    /// These are the principle functions used to interact with the graph model.
    /// 
    /// <see href="http://js.cytoscape.org/#core/graph-manipulation" />
    /// </summary>
    type [<AllowNullLiteral>] CoreGraphManipulation =
        /// Add elements to the graph and return them.
        abstract add: eles: U4<ElementDefinition, ResizeArray<ElementDefinition>, ElementsDefinition, CollectionArgument> -> CollectionReturnValue
        /// Remove elements in collecion or match the selector from the graph and return them.
        abstract remove: eles: U2<CollectionArgument, Selector> -> CollectionReturnValue
        /// Get a collection from elements in the graph matching the specified selector or from an array of elements.
        /// If no parameter specified, an empty collection will be returned
        abstract collection: ?eles: U2<Selector, ResizeArray<CollectionArgument>> -> CollectionReturnValue
        /// check whether the specified id is in the collection
        abstract hasElementWithId: id: string -> bool
        /// <summary>
        /// Get an element from its ID in a very performant way.
        /// <see href="http://js.cytoscape.org/#cy.getElementById" />
        /// </summary>
        abstract getElementById: id: string -> CollectionReturnValue
        /// <summary>
        /// Get an element from its ID in a very performant way.
        /// <see href="http://js.cytoscape.org/#cy.getElementById" />
        /// </summary>
        abstract ``$id``: id: string -> CollectionReturnValue
        /// <summary>
        /// Get elements in the graph matching the specified selector.
        /// <see href="http://js.cytoscape.org/#cy.$" />
        /// </summary>
        abstract ``$``: selector: Selector -> CollectionReturnValue
        /// <summary>
        /// Get elements in the graph matching the specified selector.
        /// <see href="http://js.cytoscape.org/#cy.$" />
        /// </summary>
        abstract elements: ?selector: Selector -> CollectionReturnValue
        /// Get nodes in the graph matching the specified selector.
        abstract nodes: ?selector: Selector -> NodeCollection
        /// Get edges in the graph matching the specified selector.
        abstract edges: ?selector: Selector -> EdgeCollection
        /// Get elements in the graph matching the specified selector or filter function.
        abstract filter: selector: U2<Selector, (Singular -> float -> CollectionArgument -> bool)> -> CollectionReturnValue
        /// <summary>
        /// Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.
        /// <see href="http://js.cytoscape.org/#cy.batch" />
        ///   A callback within which you can make batch updates to elements.
        /// </summary>
        abstract batch: callback: (unit -> unit) -> unit
        /// <summary>
        /// Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.
        /// <see href="http://js.cytoscape.org/#cy.batch" />
        /// 
        /// Starts batching manually (useful for asynchronous cases).
        /// </summary>
        abstract startBatch: unit -> unit
        /// <summary>
        /// Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.
        /// <see href="http://js.cytoscape.org/#cy.batch" />
        /// 
        /// Ends batching manually (useful for asynchronous cases).
        /// </summary>
        abstract endBatch: unit -> unit
        /// <summary>
        /// Attaches the instance to the specified container for visualisation.
        /// <see href="http://js.cytoscape.org/#cy.mount" />
        /// 
        /// If the core instance is headless prior to calling cy.mount(), then
        /// the instance will no longer be headless and the visualisation will
        /// be shown in the specified container. If the core instance is
        /// non-headless prior to calling cy.mount(), then the visualisation
        /// is swapped from the prior container to the specified container.
        /// </summary>
        abstract mount: element: Element -> unit
        /// <summary>
        /// Remove the instance from its current container.
        /// <see href="http://js.cytoscape.org/#cy.unmount" />
        /// 
        /// This function sets the instance to be headless after unmounting from
        /// the current container.
        /// </summary>
        abstract unmount: unit -> unit
        /// <summary>
        /// A convenience function to explicitly destroy the Core.
        /// <see href="http://js.cytoscape.org/#cy.destroy" />
        /// </summary>
        abstract destroy: unit -> unit
        /// <summary>
        /// Get whether the instance of Cytoscape.js has been destroyed or not.
        /// <see href="https://js.cytoscape.org/#cy.destroyed" />
        /// </summary>
        abstract destroyed: unit -> bool

    /// <summary><see href="https://js.cytoscape.org/#core/data" /></summary>
    type [<AllowNullLiteral>] CoreData =
        /// <summary>Get the entire data object or a particular data field.</summary>
        /// <param name="name">The name of the field to get.</param>
        abstract data: ?name: string -> obj option
        /// <summary>Set a particular data field.</summary>
        /// <param name="name">The name of the field to set.</param>
        /// <param name="value">The value to set for the field.</param>
        abstract data: name: string * value: obj option -> CoreData
        /// <summary>Update multiple data fields at once via an object.</summary>
        /// <param name="obj">The object containing name-value pairs to update data fields.</param>
        abstract data: obj: Record<string, obj option> -> CoreData
        /// <summary>Get the entire data object or a particular data field.</summary>
        /// <param name="name">The name of the field to get. Get the entire data object</param>
        abstract attr: ?name: string -> obj option
        /// <summary>Set a particular data field.</summary>
        /// <param name="name">The name of the field to set.</param>
        /// <param name="value">The value to set for the field.</param>
        abstract attr: name: string * value: obj option -> CoreData
        /// <summary>Update multiple data fields at once via an object.</summary>
        /// <param name="obj">The object containing name-value pairs to update data fields.</param>
        abstract attr: obj: Record<string, obj option> -> CoreData
        /// <summary>
        /// Remove developer-defined data associated with the elements.
        /// <see href="https://js.cytoscape.org/#cy.removeData" />
        /// </summary>
        /// <param name="names">A space-separated list of fields to delete.</param>
        abstract removeData: ?names: string -> CoreData
        /// <summary>
        /// Remove developer-defined data associated with the elements.
        /// <see href="https://js.cytoscape.org/#cy.removeData" />
        /// </summary>
        /// <param name="names">A space-separated list of fields to delete.</param>
        abstract removeAttr: ?names: string -> CoreData

    /// <summary>
    /// <see href="http://js.cytoscape.org/#core/graph-manipulation" />
    /// <see href="http://js.cytoscape.org/#extensions" />
    /// These functions are intended for use in extensions.
    /// </summary>
    type [<AllowNullLiteral>] CoreGraphManipulationExt =
        /// <summary>
        /// Set the scratchpad at a particular namespace,
        /// where temporary or non-JSON data can be stored.
        /// App-level scratchpad data should use namespaces prefixed with underscore, like '_foo'.
        /// 
        /// If no parameter provided, the entire scratchpad will be returned.
        /// If only namespace provided, the scratchpad with the namespace will be returned.
        /// </summary>
        /// <param name="namespace">A namespace string.</param>
        /// <param name="value">The value to set at the specified namespace.</param>
        abstract scratch: ?``namespace``: string -> Scratchpad
        abstract scratch: ``namespace``: string * value: obj option -> CoreGraphManipulationExt
        /// <summary>
        /// Remove scratchpad data. You should remove scratchpad data only at your own namespaces.
        /// <see href="http://js.cytoscape.org/#cy.removeScratch" />
        /// </summary>
        /// <param name="namespace">A namespace string.</param>
        abstract removeScratch: ``namespace``: string -> CoreGraphManipulationExt

    /// <summary>
    /// The principle events from the graph model.
    ///   <see href="http://js.cytoscape.org/#core/events" />
    /// </summary>
    type [<AllowNullLiteral>] CoreEvents =
        /// <summary>Bind to events that occur in the graph.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        /// <param name="selector">A selector to specify elements for which the handler is triggered.</param>
        /// <param name="data">A plain object which is passed to the handler in the event object argument.</param>
        /// <param name="eventsMap">A map of event names to handler functions.</param>
        abstract on: events: EventNames * handler: EventHandler -> CoreEvents
        abstract on: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        abstract on: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        abstract on: eventsMap: CoreEventsOnEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        abstract bind: events: EventNames * handler: EventHandler -> CoreEvents
        abstract bind: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        abstract bind: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        abstract bind: eventsMap: CoreEventsBindEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        abstract listen: events: EventNames * handler: EventHandler -> CoreEvents
        abstract listen: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        abstract listen: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        abstract listen: eventsMap: CoreEventsListenEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        abstract addListener: events: EventNames * handler: EventHandler -> CoreEvents
        abstract addListener: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        abstract addListener: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        abstract addListener: eventsMap: CoreEventsAddListenerEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        /// <summary>
        /// Get a promise that is resolved with the first
        /// of any of the specified events triggered on the graph.
        /// </summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="selector">[optional] A selector to specify elements for which the handler is triggered.</param>
        abstract promiseOn: events: EventNames * ?selector: Selector -> Promise<EventHandler>
        abstract pon: events: EventNames * ?selector: Selector -> Promise<EventHandler>
        /// <summary>Bind to events that occur in the graph, and trigger the handler only once.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        abstract one: events: EventNames * handler: EventHandler -> CoreEvents
        /// <summary>Bind to events that occur in the graph, and trigger the handler only once.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        /// <param name="selector">A selector to specify elements for which the handler is triggered.</param>
        abstract one: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        /// <summary>Bind to events that occur in the graph, and trigger the handler only once.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        /// <param name="selector">A selector to specify elements for which the handler is triggered.</param>
        /// <param name="data">A plain object which is passed to the handler in the event object argument.</param>
        abstract one: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        /// <summary>Bind to events that occur in the graph, and trigger the handler only once.</summary>
        /// <param name="eventsMap">A map of event names to handler functions.</param>
        /// <param name="selector">A selector to specify elements for which the handler is triggered.</param>
        /// <param name="data">A plain object which is passed to the handler in the event object argument.</param>
        abstract one: eventsMap: CoreEventsOneEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        /// <summary>
        /// Remove event handlers.
        ///   <see href="http://js.cytoscape.org/#cy.off" />
        /// </summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="selector">[optional] The same selector used to bind to the events.</param>
        /// <param name="handler">[optional] A reference to the handler function to remove.</param>
        /// <param name="eventsMap">A map of event names to handler functions to remove.</param>
        abstract off: events: EventNames * ?handler: EventHandler -> CoreEvents
        abstract off: events: EventNames * selector: Selector * ?handler: EventHandler -> CoreEvents
        abstract off: eventsMap: CoreEventsOffEventsMap * ?selector: Selector -> CoreEvents
        abstract unbind: events: EventNames * ?handler: EventHandler -> CoreEvents
        abstract unbind: events: EventNames * selector: Selector * ?handler: EventHandler -> CoreEvents
        abstract unbind: eventsMap: CoreEventsUnbindEventsMap * ?selector: Selector -> CoreEvents
        abstract unlisten: events: EventNames * ?handler: EventHandler -> CoreEvents
        abstract unlisten: events: EventNames * selector: Selector * ?handler: EventHandler -> CoreEvents
        abstract unlisten: eventsMap: CoreEventsUnlistenEventsMap * ?selector: Selector -> CoreEvents
        abstract removeListener: events: EventNames * ?handler: EventHandler -> CoreEvents
        abstract removeListener: events: EventNames * selector: Selector * ?handler: EventHandler -> CoreEvents
        abstract removeListener: eventsMap: CoreEventsRemoveListenerEventsMap * ?selector: Selector -> CoreEvents
        /// <summary>Trigger one or more events.</summary>
        /// <param name="events">A space separated list of event names to trigger.</param>
        /// <param name="extraParams">[optional] An array of additional parameters to pass to the handler.</param>
        abstract trigger: events: EventNames * ?extraParams: ResizeArray<obj option> -> CoreEvents
        abstract emit: events: EventNames * ?extraParams: ResizeArray<obj option> -> CoreEvents
        /// <summary>Run a callback as soon as the graph becomes ready. If the graph is already ready, then the callback is called immediately.</summary>
        /// <param name="fn">The callback run as soon as the graph is ready, inside which this refers to the core (cy).</param>
        abstract ready: fn: EventHandler -> CoreEvents

    type [<AllowNullLiteral>] CoreEventsOnEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsBindEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsListenEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsAddListenerEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsOneEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsOffEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsUnbindEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsUnlistenEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsRemoveListenerEventsMap =
        [<EmitIndexer>] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] ZoomOptionsModel =
        /// The position about which to zoom.
        abstract position: Position with get, set

    type [<AllowNullLiteral>] ZoomOptionsRendered =
        /// The rendered position about which to zoom.
        abstract renderedPosition: Position with get, set

    type [<AllowNullLiteral>] ZoomOptionsLevel =
        /// The zoom level to set.
        abstract level: float with get, set

    type ZoomOptions =
        U2<float, obj>

    /// <summary><see href="http://js.cytoscape.org/#core/viewport-manipulation" /></summary>
    type [<AllowNullLiteral>] CoreViewportManipulation =
        /// Get the HTML DOM element in which the graph is visualised.
        /// A null value is returned if the Core is headless.
        abstract container: unit -> HTMLElement option
        /// <summary>Pan the graph to the centre of a collection.</summary>
        /// <param name="eles">The collection to centre upon.</param>
        abstract center: ?eles: CollectionArgument -> CoreViewportManipulation
        /// <summary>Pan the graph to the centre of a collection.</summary>
        /// <param name="eles">The collection to centre upon.</param>
        abstract centre: ?eles: CollectionArgument -> CoreViewportManipulation
        /// <summary>
        /// Pan and zooms the graph to fit to a collection.
        /// <see href="http://js.cytoscape.org/#cy.fit" />
        /// </summary>
        /// <param name="eles">[optional] The collection to fit to.</param>
        /// <param name="padding">[optional] An amount of padding (in pixels) to have around the graph</param>
        abstract fit: ?eles: CollectionArgument * ?padding: float -> CoreViewportManipulation
        /// <summary>
        /// Reset the graph to the default zoom level and panning position.
        /// <see href="http://js.cytoscape.org/#cy.reset" />
        /// </summary>
        abstract reset: unit -> CoreViewportManipulation
        /// <summary>
        /// Get the panning position of the graph.
        /// <see href="http://js.cytoscape.org/#cy.pan" />
        /// </summary>
        abstract pan: unit -> Position
        /// <summary>
        /// Set the panning position of the graph.
        /// <see href="http://js.cytoscape.org/#cy.pan" />
        /// </summary>
        /// <param name="renderedPosition">The rendered position to pan the graph to.</param>
        abstract pan: ?renderedPosition: Position -> CoreViewportManipulation
        /// <summary>
        /// Relatively pan the graph by a specified rendered position vector.
        /// <see href="http://js.cytoscape.org/#cy.panBy" />
        /// </summary>
        /// <param name="renderedPosition">The rendered position vector to pan the graph by.</param>
        abstract panBy: renderedPosition: Position -> CoreViewportManipulation
        /// <summary>
        /// Get whether panning is enabled.
        /// If cy.boxSelectionEnabled() === true, then the user
        /// must taphold to initiate panning.
        /// <see href="http://js.cytoscape.org/#cy.panningEnabled" />
        /// </summary>
        abstract panningEnabled: unit -> bool
        /// <summary>
        /// Set whether panning is enabled. If cy.boxSelectionEnabled() === true, then the user must taphold to initiate panning.
        /// <see href="http://js.cytoscape.org/#cy.panningEnabled" />
        /// </summary>
        /// <param name="bool">A truthy value enables panning; a falsey value disables it.</param>
        abstract panningEnabled: ?bool: bool -> CoreViewportManipulation
        /// <summary>
        /// Get whether panning by user events (e.g. dragging the graph background) is enabled. If cy.boxSelectionEnabled() === true, then the user must taphold to initiate panning.
        /// <see href="http://js.cytoscape.org/#cy.userPanningEnabled" />
        /// </summary>
        abstract userPanningEnabled: unit -> bool
        /// <summary>
        /// Set whether panning by user events (e.g. dragging the graph background) is enabled. If cy.boxSelectionEnabled() === true, then the user must taphold to initiate panning.
        /// <see href="http://js.cytoscape.org/#cy.userPanningEnabled" />
        /// </summary>
        /// <param name="bool">A truthy value enables user panning; a falsey value disables it.</param>
        abstract userPanningEnabled: ?bool: bool -> CoreViewportManipulation
        /// <summary>
        /// Get the zoom level.
        /// <see href="http://js.cytoscape.org/#cy.zoom" />
        /// </summary>
        abstract zoom: unit -> float
        /// <summary>
        /// Set the zoom level.
        /// <see href="http://js.cytoscape.org/#cy.zoom" />
        /// </summary>
        /// <param name="level">The zoom level to set.</param>
        /// <param name="options">The options for zooming.</param>
        abstract zoom: ?level: U2<float, ZoomOptions> -> CoreViewportManipulation
        /// <summary>
        /// Set or get whether zooming is enabled. Get if no parameter provided.
        /// <see href="http://js.cytoscape.org/#cy.zoomingEnabled" />
        /// </summary>
        /// <param name="bool">A truthy value enables zooming; a falsey value disables it.</param>
        abstract zoomingEnabled: ?bool: bool -> CoreViewportManipulation
        /// <summary>
        /// Get whether zooming by user events (e.g. mouse wheel, pinch-to-zoom)
        /// is enabled.
        /// <see href="http://js.cytoscape.org/#cy.userZoomingEnabled" />
        /// </summary>
        abstract userZoomingEnabled: unit -> bool
        /// <summary>
        /// Get or set whether zooming by user events get if no parameter provided
        /// (e.g. mouse wheel, pinch-to-zoom) is enabled.
        /// <see href="http://js.cytoscape.org/#cy.userZoomingEnabled" />
        /// </summary>
        /// <param name="bool">A truthy value enables user zooming; a falsey value disables it.</param>
        abstract userZoomingEnabled: ?bool: bool -> CoreViewportManipulation
        /// <summary>
        /// Get the minimum zoom level.
        /// <see href="http://js.cytoscape.org/#cy.minZoom" />
        /// </summary>
        abstract minZoom: unit -> float
        /// <summary>
        /// Set the minimum zoom level.
        /// <see href="http://js.cytoscape.org/#cy.minZoom" />
        /// </summary>
        /// <param name="zoom">The new minimum zoom level to use.</param>
        abstract minZoom: zoom: float -> CoreViewportManipulation
        /// <summary>
        /// Get the maximum zoom level.
        /// <see href="http://js.cytoscape.org/#cy.maxZoom" />
        /// </summary>
        abstract maxZoom: unit -> float
        /// <summary>
        /// Set the maximum zoom level.
        /// <see href="http://js.cytoscape.org/#cy.maxZoom" />
        /// </summary>
        /// <param name="zoom">The new maximum zoom level to use.</param>
        abstract maxZoom: zoom: float -> CoreViewportManipulation
        /// <summary>
        /// Set the viewport state (pan &amp; zoom) in one call.
        /// <see href="http://js.cytoscape.org/#cy.viewport" />
        /// </summary>
        /// <param name="options">The viewport options.</param>
        /// <param name="options.zoom">The zoom level to set.</param>
        /// <param name="options.pan">The pan to set (a rendered position).</param>
        abstract viewport: options: CoreViewportManipulationViewportOptions -> CoreViewportManipulation
        /// <summary>
        /// Get whether box selection is enabled.
        /// If enabled, the user must hold left-click to initiate panning.
        /// <see href="http://js.cytoscape.org/#cy.boxSelectionEnabled" />
        /// </summary>
        abstract boxSelectionEnabled: unit -> bool
        /// <summary>
        /// Set whether box selection is enabled.
        /// If enabled, the user must hold left-click to initiate panning.
        /// <see href="http://js.cytoscape.org/#cy.boxSelectionEnabled" />
        /// </summary>
        /// <param name="bool">A truthy value enables box selection; a falsey value disables it.</param>
        abstract boxSelectionEnabled: ?bool: bool -> CoreViewportManipulation
        /// <summary>
        /// Get the selection type.
        /// <see href="http://js.cytoscape.org/#cy.selectionType" />
        /// </summary>
        abstract selectionType: unit -> SelectionType
        /// <summary>
        /// Set the selection type.
        /// <see href="http://js.cytoscape.org/#cy.selectionType" />
        /// </summary>
        /// <param name="type">The selection type string; one of 'single' (default) or 'additive'.</param>
        abstract selectionType: ``type``: SelectionType -> CoreViewportManipulation
        /// <summary>
        /// Get the on-screen width of the viewport in pixels.
        /// <see href="http://js.cytoscape.org/#cy.width" />
        /// </summary>
        abstract width: unit -> float
        /// <summary>
        /// Get the on-screen height of the viewport in pixels.
        /// <see href="http://js.cytoscape.org/#cy.height" />
        /// </summary>
        abstract height: unit -> float
        /// <summary>
        /// Get the extent of the viewport, a bounding box in model
        /// coordinates that lets you know what model
        /// positions are visible in the viewport.
        /// <see href="http://js.cytoscape.org/#cy.extent" />
        /// </summary>
        abstract extent: unit -> CoreViewportManipulationExtentReturn
        /// <summary>
        /// Get whether nodes are automatically locked
        /// (i.e. if true, nodes are locked despite their individual state).
        /// <see href="http://js.cytoscape.org/#cy.autolock" />
        /// </summary>
        abstract autolock: unit -> bool
        /// <summary>
        /// Set whether nodes are automatically locked
        /// (i.e. if true, nodes are locked despite their individual state).
        /// <see href="http://js.cytoscape.org/#cy.autolock" />
        /// </summary>
        /// <param name="bool">A truthy value enables autolocking; a falsey value disables it.</param>
        abstract autolock: ?bool: bool -> CoreViewportManipulation
        /// <summary>
        /// Get whether nodes are automatically ungrabified
        /// (i.e. if true, nodes are ungrabbale despite their individual state).
        /// <see href="http://js.cytoscape.org/#cy.autoungrabify" />
        /// </summary>
        abstract autoungrabify: unit -> bool
        /// <summary>
        /// Set whether nodes are automatically ungrabified
        /// (i.e. if true, nodes are ungrabbale despite their individual state).
        /// <see href="http://js.cytoscape.org/#cy.autoungrabify" />
        /// </summary>
        /// <param name="bool">A truthy value enables autolocking; a falsey value disables it.</param>
        abstract autoungrabify: ?bool: bool -> CoreViewportManipulation
        /// <summary>
        /// Get whether nodes are automatically unselectified
        /// (i.e. if true, nodes are unselectable despite their individual state).
        /// <see href="http://js.cytoscape.org/#cy.autounselectify" />
        /// </summary>
        abstract autounselectify: unit -> bool
        /// <summary>
        /// Set whether nodes are automatically unselectified
        /// (i.e. if true, nodes are unselectable despite their individual state).
        /// <see href="http://js.cytoscape.org/#cy.autounselectify" />
        /// </summary>
        /// <param name="bool">A truthy value enables autolocking; a falsey value disables it.</param>
        abstract autounselectify: ?bool: bool -> CoreViewportManipulation
        /// <summary>
        /// Force the renderer to redraw (i.e. draw a new frame).
        /// 
        /// This function forces the renderer to draw a new frame.
        /// It is useful for very specific edgecases, such as in certain UI plugins,
        /// but it should not be needed for most developers.
        /// <see href="http://js.cytoscape.org/#cy.forceRender" />
        /// </summary>
        abstract forceRender: unit -> CoreViewportManipulation
        /// <summary>
        /// Force the renderer to recalculate the viewport bounds.
        /// 
        /// If your code resizes the graph's dimensions or position
        /// (i.e. by changing the style of the HTML DOM element that holds the graph),
        /// you will want to call cy.resize() to have the graph resize and redraw itself.
        /// 
        /// Cytoscape.js can not automatically monitor the bounding box of the viewport,
        /// as querying the DOM for those dimensions can be expensive.
        /// Although cy.resize() is automatically called for you on the window's resize event,
        /// there is no resize or style event for arbitrary DOM elements.
        /// <see href="http://js.cytoscape.org/#cy.resize" />
        /// </summary>
        abstract resize: unit -> CoreViewportManipulation
        abstract invalidateDimensions: unit -> CoreViewportManipulation

    type [<AllowNullLiteral>] CoreViewportManipulationViewportOptions =
        abstract zoom: float with get, set
        abstract pan: Position with get, set

    type [<AllowNullLiteral>] CoreViewportManipulationExtentReturn =
        abstract x1: float with get, set
        abstract y1: float with get, set
        abstract x2: float with get, set
        abstract y2: float with get, set
        abstract w: float with get, set
        abstract h: float with get, set

    /// <summary><see href="http://js.cytoscape.org/#core/animation" /></summary>
    type [<AllowNullLiteral>] AnimationFitOptions =
        abstract eles: U2<CollectionArgument, Selector> with get, set
        abstract padding: float with get, set

    type [<AllowNullLiteral>] CenterOptions =
        abstract eles: U2<CollectionArgument, Selector> with get, set

    type [<AllowNullLiteral>] AnimationOptions =
        /// A zoom level to which the graph will be animated.
        abstract zoom: ZoomOptions option with get, set
        /// A panning position to which the graph will be animated.
        abstract pan: Position option with get, set
        /// A relative panning position to which the graph will be animated.
        abstract panBy: Position option with get, set
        /// An object containing fitting options from which the graph will be animated.
        abstract fit: AnimationFitOptions option with get, set
        /// An object containing centring options from which the graph will be animated.
        abstract center: CenterOptions option with get, set
        /// easing - A transition-timing-function easing style string that shapes the animation progress curve.
        abstract easing: Css.TransitionTimingFunction option with get, set
        /// duration - The duration of the animation in milliseconds.
        abstract duration: float option with get, set

    type [<AllowNullLiteral>] AnimateOptions =
        inherit AnimationOptions
        /// queue - A boolean indicating whether to queue the animation.
        abstract queue: bool option with get, set
        /// complete - A function to call when the animation is done.
        abstract complete: unit -> unit
        /// step - A function to call each time the animation steps.
        abstract step: unit -> unit

    type [<AllowNullLiteral>] CoreAnimation =
        /// <summary>
        /// Get whether the viewport is currently being animated.
        /// <see href="http://js.cytoscape.org/#cy.animated" />
        /// </summary>
        abstract animated: unit -> bool
        /// <summary>
        /// Animate the viewport.
        /// <see href="http://js.cytoscape.org/#cy.animate" />
        /// </summary>
        /// <param name="anis">An object containing the details of the animation.</param>
        /// <param name="options">An object containing animation options.</param>
        abstract animate: anis: AnimateOptions * ?options: AnimateOptions -> Core
        /// <summary>
        /// Get an animation of the viewport.
        /// <see href="http://js.cytoscape.org/#cy.animation" />
        /// </summary>
        abstract animation: options: AnimationOptions -> AnimationManipulation
        /// <summary>Add a delay between animations for the viewport.</summary>
        /// <param name="duration">How long the delay should be in milliseconds.</param>
        /// <param name="complete">A function to call when the delay is complete.</param>
        abstract delay: duration: float * ?complete: (unit -> unit) -> Core
        /// <summary>
        /// Get a delay animation of the viewport.
        /// <see href="http://js.cytoscape.org/#cy.delayAnimation" />
        /// </summary>
        abstract delayAnimation: duration: float -> AnimationManipulation
        /// <summary>
        /// Stop all viewport animations that are currently running.
        /// <see href="http://js.cytoscape.org/#cy.stop" />
        /// </summary>
        /// <param name="clearQueue">A boolean, indicating whether the queue of animations should be emptied.</param>
        /// <param name="jumpToEnd">A boolean, indicating whether the currently-running animations should jump to their ends rather than just stopping midway.</param>
        abstract stop: ?clearQueue: bool * ?jumpToEnd: bool -> Core
        /// <summary>
        /// Remove all queued animations for the viewport.
        /// <see href="http://js.cytoscape.org/#cy.clearQueue" />
        /// </summary>
        abstract clearQueue: unit -> Core

    /// <summary><see href="http://js.cytoscape.org/#core/layout" /></summary>
    type [<AllowNullLiteral>] CoreLayout =
        /// <summary>
        /// Run a layout, which algorithmically positions the nodes in the graph.
        /// For layouts included with Cytoscape.js, you can find their
        /// options documented in the Layouts section.
        /// For external layouts, please refer to their accompanying documentation.
        /// 
        /// An analogue to run a layout on a subset of the graph exists as eles.layout().
        /// <see href="http://js.cytoscape.org/#cy.layout" />
        /// </summary>
        abstract layout: layout: LayoutOptions -> Layouts
        /// Get a new layout, which can be used to algorithmically
        /// position the nodes in the graph.
        /// 
        /// You must specify options.name with the name of the layout you wish to use.
        /// 
        /// This function creates and returns a layout object.
        /// You may want to keep a reference to the layout for more advanced usecases,
        /// such as running multiple layouts simultaneously.
        /// Note that you must call layout.run() in order for it to affect the graph.
        /// An analogue to make a layout on a subset of the graph exists as eles.makeLayout().
        abstract makeLayout: options: LayoutOptions -> Layouts
        abstract createLayout: options: LayoutOptions -> Layouts

    /// <summary>
    /// Get the entry point to modify the visual style of the graph after initialisation.
    /// <see href="http://js.cytoscape.org/#core/style" />
    /// </summary>
    type [<AllowNullLiteral>] ElementStylesheetStyle =
        inherit StylesheetStyle
        abstract json: unit -> obj option

    type [<AllowNullLiteral>] ElementStylesheetCSS =
        inherit StylesheetCSS
        abstract json: unit -> obj option

    type [<AllowNullLiteral>] CoreStyle =
        /// Get the current style object.
        abstract style: unit -> U2<ElementStylesheetStyle, ElementStylesheetCSS>
        /// Assign a new stylesheet to replace the existing one.
        abstract style: sheet: U3<Stylesheet, ResizeArray<Stylesheet>, string> -> Stylesheet

    /// <summary><see href="http://js.cytoscape.org/#cy.style" /></summary>
    type Stylesheet =
        U2<StylesheetStyle, StylesheetCSS>

    type [<AllowNullLiteral>] StylesheetStyle =
        abstract selector: string with get, set
        abstract style: U3<Css.Node, Css.Edge, Css.Core> with get, set

    /// <summary><see href="http://js.cytoscape.org/#cy.style" /></summary>
    type [<AllowNullLiteral>] StylesheetCSS =
        abstract selector: string with get, set
        abstract css: U3<Css.Node, Css.Edge, Css.Core> with get, set

    /// <summary><see href="http://js.cytoscape.org/#core/export" /></summary>
    type [<AllowNullLiteral>] ExportOptions =
        /// The background colour of the image (transparent by default).
        abstract bg: string option with get, set
        /// Whether to export the current viewport view (false, default) or the entire graph (true).
        abstract full: bool option with get, set
        /// This value specifies a positive number that scales the size of the resultant image.
        abstract scale: float option with get, set
        /// Specifies the scale automatically in combination with maxHeight such that the resultant image is no wider than maxWidth.
        abstract maxWidth: float option with get, set
        /// Specifies the scale automatically in combination with maxWidth such that the resultant image is no taller than maxHeight.
        abstract maxHeight: float option with get, set

    type [<AllowNullLiteral>] ExportStringOptions =
        inherit ExportOptions
        /// output Whether the output should be 'base64uri' (default), 'base64', or 'blob'.
        abstract output: ExportStringOptionsOutput option with get, set

    type [<AllowNullLiteral>] ExportBlobOptions =
        inherit ExportOptions
        /// output Whether the output should be 'base64uri' (default), 'base64', or 'blob'.
        abstract output: ExportBlobOptionsOutput option with get, set

    type [<AllowNullLiteral>] ExportBlobPromiseOptions =
        inherit ExportOptions
        /// output Whether the output should be 'base64uri' (default), 'base64', 'blob', or 'blob-promise'.
        abstract output: ExportBlobPromiseOptionsOutput option with get, set

    type [<AllowNullLiteral>] ExportJpgOptions =
        inherit ExportOptions
        /// quality Specifies the quality of the image from 0
        /// (low quality, low filesize) to 1 (high quality, high filesize).
        /// If not set, the browser's default quality value is used.
        abstract quality: float option with get, set

    type [<AllowNullLiteral>] ExportJpgStringOptions =
        inherit ExportJpgOptions
        inherit ExportStringOptions

    type [<AllowNullLiteral>] ExportJpgBlobOptions =
        inherit ExportJpgOptions
        inherit ExportBlobOptions

    type [<AllowNullLiteral>] ExportJpgBlobPromiseOptions =
        inherit ExportJpgOptions
        inherit ExportBlobPromiseOptions

    type [<AllowNullLiteral>] CoreExport =
        /// Export the current graph view as a PNG image in Base64 representation.
        abstract png: ?options: ExportStringOptions -> string
        abstract png: ?options: ExportBlobOptions -> Blob
        abstract png: ?options: ExportBlobPromiseOptions -> Promise<Blob>
        /// Export the current graph view as a JPG image in Base64 representation.
        abstract jpg: ?options: ExportJpgStringOptions -> string
        abstract jpg: ?options: ExportJpgBlobOptions -> Blob
        abstract jpg: ?options: ExportJpgBlobPromiseOptions -> Promise<Blob>
        /// Export the current graph view as a JPG image in Base64 representation.
        abstract jpeg: ?options: ExportJpgStringOptions -> string
        abstract jpeg: ?options: ExportJpgBlobOptions -> Blob
        abstract jpeg: ?options: ExportJpgBlobPromiseOptions -> Promise<Blob>
        /// Export the graph as JSON, the same format used at initialisation.
        abstract json: unit -> obj
        abstract json: json: obj -> CoreExport

    /// <summary>
    /// eles --&gt; Cy.Collection
    ///   a collection of one or more elements (nodes and edges)
    /// 
    /// The input can be any element (node and edge) collection.
    /// <see href="http://js.cytoscape.org/#collection" />
    /// </summary>
    type Collection =
        Collection<SingularElementReturnValue, SingularElementArgument>

    /// <summary>
    /// eles --&gt; Cy.Collection
    ///   a collection of one or more elements (nodes and edges)
    /// 
    /// The input can be any element (node and edge) collection.
    /// <see href="http://js.cytoscape.org/#collection" />
    /// </summary>
    type Collection<'TOut> =
        Collection<'TOut, SingularElementArgument>

    /// <summary>
    /// eles --&gt; Cy.Collection
    ///   a collection of one or more elements (nodes and edges)
    /// 
    /// The input can be any element (node and edge) collection.
    /// <see href="http://js.cytoscape.org/#collection" />
    /// </summary>
    type [<AllowNullLiteral>] Collection<'TOut, 'TIn> =
        inherit CollectionGraphManipulation
        inherit CollectionEvents
        inherit CollectionData
        inherit CollectionPosition
        inherit CollectionTraversing
        inherit CollectionLayout
        inherit CollectionSelection
        inherit CollectionStyle
        inherit CollectionAnimation
        inherit CollectionComparision
        inherit CollectionIteration<'TIn, 'TOut>
        inherit CollectionBuildingFiltering<'TIn, 'TOut>
        inherit CollectionAlgorithms

    /// ele  --> Cy.Singular
    /// a collection of a single element (node or edge)
    /// NB: every singular collection is a general collection too (but not vice versa)!
    type Singular =
        Singular<SingularElementReturnValue, SingularElementArgument>

    /// ele  --> Cy.Singular
    /// a collection of a single element (node or edge)
    /// NB: every singular collection is a general collection too (but not vice versa)!
    type Singular<'TOut> =
        Singular<'TOut, SingularElementArgument>

    /// ele  --> Cy.Singular
    /// a collection of a single element (node or edge)
    /// NB: every singular collection is a general collection too (but not vice versa)!
    type [<AllowNullLiteral>] Singular<'TOut, 'TIn> =
        inherit Collection<'TOut, 'TIn>
        inherit SingularGraphManipulation
        inherit SingularData
        inherit SingularPosition
        inherit SingularSelection
        inherit SingularStyle
        inherit SingularAnimation

    type [<AllowNullLiteral>] ElementsDefinition =
        abstract nodes: ResizeArray<NodeDefinition> with get, set
        abstract edges: ResizeArray<EdgeDefinition> with get, set

    type [<AllowNullLiteral>] EventHandler =
        [<Emit "$0($1...)">] abstract Invoke: ``event``: EventObject * ?extraParams: obj -> unit

    /// The output is a collection of node and edge elements OR single element.
    type CollectionArgument =
        U4<Collection, EdgeCollection, NodeCollection, SingularElementArgument>

    type [<AllowNullLiteral>] CollectionReturnValue =
        interface end

    /// edges -> Cy.EdgeCollection
    ///   a collection of one or more edges
    /// 
    /// The output is a collection of edge elements OR single edge.
    type [<AllowNullLiteral>] EdgeCollection =
        inherit Collection<EdgeSingular, EdgeSingular>
        inherit EdgeCollectionTraversing

    /// nodes -> Cy.NodeCollection
    /// a collection of one or more nodes
    /// 
    /// The output is a collection of node elements OR single node.
    type [<AllowNullLiteral>] NodeCollection =
        inherit Collection<NodeSingular, NodeSingular>
        inherit NodeCollectionMetadata
        inherit NodeCollectionPosition
        inherit NodeCollectionTraversing
        inherit NodeCollectionCompound

    type SingularElementArgument =
        U2<EdgeSingular, NodeSingular>

    type [<AllowNullLiteral>] SingularElementReturnValue =
        interface end

    /// edge --> Cy.EdgeSingular
    /// a collection of a single edge
    type [<AllowNullLiteral>] EdgeSingular =
        inherit Singular<EdgeSingular, EdgeSingular>
        inherit EdgeCollection
        inherit EdgeSingularData
        inherit EdgeSingularPoints
        inherit EdgeSingularTraversing

    /// node --> Cy.NodeSingular
    /// a collection of a single node
    type [<AllowNullLiteral>] NodeSingular =
        inherit Singular<NodeSingular, NodeSingular>
        inherit NodeCollection
        inherit NodeSingularMetadata
        inherit NodeSingularPosition
        inherit NodeSingularCompound

    /// <summary><see href="http://js.cytoscape.org/#collection/graph-manipulation" /></summary>
    type [<AllowNullLiteral>] CollectionGraphManipulation =
        /// <summary>
        /// Remove the elements from the graph.
        /// <see href="http://js.cytoscape.org/#eles.remove" />
        /// </summary>
        abstract remove: unit -> CollectionReturnValue
        /// <summary>
        /// Put removed elements back into the graph.
        /// <see href="http://js.cytoscape.org/#eles.restore" />
        /// </summary>
        abstract restore: unit -> CollectionReturnValue
        /// <summary>
        /// Get a new collection containing clones (i.e. copies) of the elements in the calling collection.
        /// <see href="http://js.cytoscape.org/#eles.clone" />
        /// </summary>
        abstract clone: unit -> CollectionReturnValue
        /// <summary>
        /// Get a new collection containing clones (i.e. copies) of the elements in the calling collection.
        /// <see href="http://js.cytoscape.org/#eles.clone" />
        /// </summary>
        abstract copy: unit -> CollectionReturnValue
        /// <summary>
        /// Effectively move edges to different nodes. The modified (actually new) elements are returned.
        /// <see href="http://js.cytoscape.org/#eles.move" />
        /// </summary>
        abstract move: location: CollectionGraphManipulationMoveLocation -> EdgeCollection
        /// <summary>
        /// Effectively move nodes to different parent node. The modified (actually new) elements are returned.
        /// <see href="http://js.cytoscape.org/#eles.move" />
        /// </summary>
        abstract move: location: CollectionGraphManipulationMoveLocation_ -> NodeCollection

    type [<AllowNullLiteral>] CollectionGraphManipulationMoveLocation =
        abstract source: string option with get, set
        abstract target: string option with get, set

    type [<AllowNullLiteral>] CollectionGraphManipulationMoveLocation_ =
        abstract parent: string option with get, set

    /// <summary><see href="http://js.cytoscape.org/#collection/graph-manipulation" /></summary>
    type [<AllowNullLiteral>] SingularGraphManipulation =
        /// Get the core instance that owns the element.
        abstract cy: unit -> Core
        /// <summary>
        /// Get whether the element has been removed from the graph.
        /// <see href="http://js.cytoscape.org/#ele.removed" />
        /// </summary>
        abstract removed: unit -> bool
        /// <summary>
        /// Get whether the element is inside the graph (i.e. not removed).
        /// <see href="http://js.cytoscape.org/#ele.inside" />
        /// </summary>
        abstract inside: unit -> bool

    /// <summary><see href="http://js.cytoscape.org/#collection/events" /></summary>
    type [<AllowNullLiteral>] CollectionEvents =
        /// <summary><see href="http://js.cytoscape.org/#eles.on" /></summary>
        abstract on: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract on: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract on: events: EventNames * handler: EventHandler -> CollectionEvents
        abstract bind: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract bind: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract bind: events: EventNames * handler: EventHandler -> CollectionEvents
        abstract listen: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract listen: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract listen: events: EventNames * handler: EventHandler -> CollectionEvents
        abstract addListener: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract addListener: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract addListener: events: EventNames * handler: EventHandler -> CollectionEvents
        /// <summary>
        /// <see href="http://js.cytoscape.org/#eles.promiseOn" />
        /// alias: pon
        /// </summary>
        abstract promiseOn: events: EventNames * ?selector: string -> Promise<EventHandler>
        abstract pon: events: EventNames * ?selector: string -> Promise<EventHandler>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="selector">[optional] A delegate selector to specify child elements for which the handler is triggered.</param>
        /// <param name="data">[optional] A plain object which is passed to the handler in the event object argument.</param>
        /// <param name="function">(event) The handler function that is called when one of the specified events occurs.</param>
        /// <param name="event">
        /// The event object.
        /// <see href="http://js.cytoscape.org/#eles.one" />
        /// </param>
        abstract one: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract one: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract one: events: EventNames * handler: EventHandler -> CollectionEvents
        /// <summary><see href="http://js.cytoscape.org/#eles.once" /></summary>
        abstract once: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract once: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract once: events: EventNames * handler: EventHandler -> CollectionEvents
        /// <summary>
        /// <see href="http://js.cytoscape.org/#eles.off" />
        /// alias unbind, unlisten, removeListener
        /// </summary>
        abstract off: events: EventNames * ?selector: string * ?handler: EventHandler -> CollectionEvents
        abstract unbind: events: EventNames * ?selector: string * ?handler: EventHandler -> CollectionEvents
        abstract unlisten: events: EventNames * ?selector: string * ?handler: EventHandler -> CollectionEvents
        abstract removeListener: events: EventNames * ?selector: string * ?handler: EventHandler -> CollectionEvents
        /// <summary>
        /// <see href="http://js.cytoscape.org/#eles.trigger" />
        /// alias: emit
        /// </summary>
        abstract trigger: events: EventNames * ?extra: ResizeArray<string> -> CollectionEvents
        abstract emit: events: EventNames * ?extra: ResizeArray<string> -> CollectionEvents

    /// <summary>
    /// <see href="http://js.cytoscape.org/#collection/data" />
    /// 
    /// The following fields are immutable:
    /// id: The id field is used to uniquely identify an element in the graph.
    /// source &amp; target : These fields define an edge's relationship to nodes, and this relationship can not be changed after creation.
    /// parent: The parent field defines the parent (compound) node.
    /// </summary>
    type [<AllowNullLiteral>] CollectionData =
        /// <summary>
        /// Remove developer-defined data associated with the elements.
        /// <see href="http://js.cytoscape.org/#eles.removeData" />
        /// </summary>
        /// <param name="names">A space-separated list of fields to delete.</param>
        abstract removeData: ?names: string -> CollectionReturnValue
        abstract removeAttr: ?names: string -> CollectionReturnValue
        /// Get an array of the plain JavaScript object
        /// representation of all elements in the collection.
        abstract jsons: unit -> ResizeArray<string>

    /// <summary><see href="http://js.cytoscape.org/#collection/data" /></summary>
    type [<AllowNullLiteral>] SingularData =
        /// <summary>Get a particular data field for the element.</summary>
        /// <param name="name">The name of the field to get.</param>
        abstract data: ?name: string -> obj option
        /// <summary>Set a particular data field for the element.</summary>
        /// <param name="name">The name of the field to set.</param>
        /// <param name="value">The value to set for the field.</param>
        abstract data: name: string * value: obj option -> SingularData
        /// <summary>Update multiple data fields at once via an object.</summary>
        /// <param name="obj">The object containing name- value pairs to update data fields.</param>
        abstract data: obj: obj option -> SingularData
        /// <summary>Get a particular data field for the element.</summary>
        /// <param name="name">The name of the field to get.</param>
        abstract attr: ?name: string -> obj option
        /// <summary>Set a particular data field for the element.</summary>
        /// <param name="name">The name of the field to set.</param>
        /// <param name="value">The value to set for the field.</param>
        abstract attr: name: string * value: obj option -> SingularData
        /// <summary>Update multiple data fields at once via an object.</summary>
        /// <param name="obj">The object containing name- value pairs to update data fields.</param>
        abstract attr: obj: obj option -> SingularData
        /// <summary>
        /// Get or set the scratchpad at a particular namespace,
        /// where temporary or non-JSON data can be stored.
        /// Get scratchpad if one or no parameter provided.
        /// App-level scratchpad data should use namespaces
        /// prefixed with underscore, like '_foo'.
        /// <see href="http://js.cytoscape.org/#ele.scratch" />
        /// </summary>
        /// <param name="namespace">A namespace string.</param>
        /// <param name="value">The value to set at the specified namespace.</param>
        abstract scratch: ?``namespace``: string -> Scratchpad
        abstract scratch: ``namespace``: string * value: obj option -> SingularData
        /// <summary>
        /// Remove scratchpad data.
        /// You should remove scratchpad data only at your own namespaces.
        /// <see href="http://js.cytoscape.org/#ele.removeScratch" />
        /// </summary>
        /// <param name="namespace">A namespace string.</param>
        abstract removeScratch: ``namespace``: string -> SingularData
        /// <summary>
        /// A shortcut to get the ID of an element.
        /// <see href="http://js.cytoscape.org/#ele.id" />
        /// </summary>
        abstract id: unit -> string
        /// <summary>
        /// Get the element's plain JavaScript object representation.
        /// <see href="http://js.cytoscape.org/#ele.json" />
        /// </summary>
        abstract json: unit -> string
        /// <summary>
        /// Get the group string that defines the type of the element.
        /// 
        /// The group strings are 'nodes' for nodes and 'edges' for edges.
        /// In general, you should be using ele.isEdge()
        /// and ele.isNode() instead of ele.group().
        /// <see href="http://js.cytoscape.org/#ele.group" />
        /// </summary>
        abstract group: unit -> ElementGroup
        /// <summary>
        /// Get whether the element is a node.
        /// <see href="http://js.cytoscape.org/#ele.isNode" />
        /// </summary>
        abstract isNode: unit -> bool
        /// <summary>
        /// Get whether the element is an edge.
        /// <see href="http://js.cytoscape.org/#ele.isEdge" />
        /// </summary>
        abstract isEdge: unit -> bool

    /// <summary><see href="http://js.cytoscape.org/#collection/data" /></summary>
    type [<AllowNullLiteral>] EdgeSingularData =
        /// <summary>
        /// Get whether the edge is a loop (i.e. source same as target).
        /// <see href="http://js.cytoscape.org/#edge.isLoop" />
        /// </summary>
        abstract isLoop: unit -> bool
        /// <summary>
        /// Get whether the edge is simple (i.e. source different than target).
        /// <see href="http://js.cytoscape.org/#edge.isSimple" />
        /// </summary>
        abstract isSimple: unit -> bool

    /// <summary><see href="http://js.cytoscape.org/#collection/metadata" /></summary>
    type [<AllowNullLiteral>] NodeSingularMetadata =
        /// <summary>Get the degree of a node.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract degree: includeLoops: bool -> float
        /// <summary>Get the indegree of a node.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract indegree: includeLoops: bool -> float
        /// <summary>Get the outdegree of a node.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract outdegree: includeLoops: bool -> float

    /// <summary><see href="http://js.cytoscape.org/#collection/metadata" /></summary>
    type [<AllowNullLiteral>] NodeCollectionMetadata =
        /// <summary>Get the total degree of a collection of nodes.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract totalDegree: includeLoops: bool -> float
        /// <summary>Get the minimum degree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract minDegree: includeLoops: bool -> float
        /// <summary>Get the maximum degree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract maxDegree: includeLoops: bool -> float
        /// <summary>Get the minimum indegree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract minIndegree: includeLoops: bool -> float
        /// <summary>Get the maximum indegree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract maxIndegree: includeLoops: bool -> float
        /// <summary>Get the minimum outdegree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract minOutdegree: includeLoops: bool -> float
        /// <summary>Get the maximum outdegree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract maxOutdegree: includeLoops: bool -> float

    /// <summary><see href="http://js.cytoscape.org/#collection/position--dimensions" /></summary>
    type [<AllowNullLiteral>] NodeSingularPosition =
        /// Get the (model) position of a node.
        abstract position: unit -> Position
        /// <summary>Get the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract position: dimension: PositionDimension -> float
        /// <summary>Set the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract position: dimension: PositionDimension * value: float -> NodeSingularPosition
        /// <summary>Set the position using name-value pairs in the specified object.</summary>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract position: pos: Position -> NodeSingularPosition
        /// Get the (model) position of a node.
        abstract modelPosition: unit -> Position
        /// <summary>Get the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract modelPosition: dimension: PositionDimension -> float
        /// <summary>Set the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract modelPosition: dimension: PositionDimension * value: float -> NodeSingularPosition
        /// <summary>Set the position using name-value pairs in the specified object.</summary>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract modelPosition: pos: Position -> NodeSingularPosition
        /// Get the (model) position of a node.
        abstract point: unit -> Position
        /// <summary>Get the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract point: dimension: PositionDimension -> float
        /// <summary>Set the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract point: dimension: PositionDimension * value: float -> NodeSingularPosition
        /// <summary>Set the position using name-value pairs in the specified object.</summary>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract point: pos: Position -> NodeSingularPosition
        /// <summary>Get the value of a specified rendered position dimension.</summary>
        /// <param name="dimension">The position dimension to get.</param>
        /// <param name="value">The value to set to the dimension.</param>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract renderedPosition: ?dimension: PositionDimension -> Position
        abstract renderedPosition: dimension: PositionDimension * value: Position -> NodeSingularPosition
        abstract renderedPosition: pos: NodeSingularPositionRenderedPositionPos -> NodeSingularPosition
        /// <summary>Set the value of a specified rendered position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract renderedPoint: ?dimension: PositionDimension -> Position
        abstract renderedPoint: dimension: PositionDimension * value: Position -> NodeSingularPosition
        abstract renderedPoint: pos: NodeSingularPositionRenderedPointPos -> NodeSingularPosition
        /// <summary>Get the value of a specified relative position dimension.</summary>
        /// <param name="dimension">The position dimension to get.</param>
        /// <param name="value">The value to set to the dimension.</param>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract relativePosition: ?dimension: PositionDimension -> Position
        abstract relativePosition: dimension: PositionDimension * value: Position -> NodeSingularPosition
        abstract relativePosition: pos: NodeSingularPositionRelativePositionPos -> NodeSingularPosition
        /// <summary>Get the value of a specified relative position dimension.</summary>
        /// <param name="dimension">The position dimension to get.</param>
        /// <param name="value">The value to set to the dimension.</param>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract relativePoint: ?dimension: PositionDimension -> Position
        abstract relativePoint: dimension: PositionDimension * value: Position -> NodeSingularPosition
        abstract relativePoint: pos: NodeSingularPositionRelativePointPos -> NodeSingularPosition
        /// <summary>
        /// Get whether a node is currently grabbed, meaning the user has hold of the node.
        /// <see href="http://js.cytoscape.org/#node.grabbed" />
        /// </summary>
        abstract grabbed: unit -> bool
        /// <summary>
        /// Get whether the user can grab a node.
        /// <see href="http://js.cytoscape.org/#node.grabbable" />
        /// </summary>
        abstract grabbable: unit -> bool
        /// <summary>
        /// Get whether a node is locked, meaning that its position can not be changed.
        /// <see href="http://js.cytoscape.org/#node.locked" />
        /// </summary>
        abstract locked: unit -> bool

    type [<AllowNullLiteral>] NodeSingularPositionRenderedPositionPos =
        [<EmitIndexer>] abstract Item: name: string -> float with get, set

    type [<AllowNullLiteral>] NodeSingularPositionRenderedPointPos =
        [<EmitIndexer>] abstract Item: name: string -> float with get, set

    type [<AllowNullLiteral>] NodeSingularPositionRelativePositionPos =
        [<EmitIndexer>] abstract Item: name: string -> float with get, set

    type [<AllowNullLiteral>] NodeSingularPositionRelativePointPos =
        [<EmitIndexer>] abstract Item: name: string -> float with get, set

    /// <param name="ele">The element being iterated over for which the function should return a position to set.</param>
    /// <param name="ix">The index of the element when iterating over the elements in the collection.</param>
    type [<AllowNullLiteral>] ElementPositionFunction =
        /// <param name="ele">The element being iterated over for which the function should return a position to set.</param>
        /// <param name="ix">The index of the element when iterating over the elements in the collection.</param>
        [<Emit "$0($1...)">] abstract Invoke: ele: NodeSingular * ix: float -> Position

    type [<AllowNullLiteral>] ElementCollectionFunction =
        [<Emit "$0($1...)">] abstract Invoke: ele: NodeSingular * ix: float * eles: CollectionArgument -> Position

    /// <summary><see href="http://js.cytoscape.org/#collection/position--dimensions" /></summary>
    type [<AllowNullLiteral>] NodeCollectionPosition =
        /// <summary>Shift the positions of the nodes by a given model position vector.</summary>
        /// <param name="dimension">The position dimension to shift.</param>
        /// <param name="value">The value to shift the dimension.</param>
        abstract shift: dimension: PositionDimension * ?value: float -> NodeCollectionPosition
        /// <summary>Shift the positions of the nodes by a given model position vector.</summary>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to shift.</param>
        abstract shift: pos: Position -> NodeCollectionPosition
        /// <summary>Set the positions via a function.</summary>
        /// <param name="handler">A callback function that returns the position to set for each element.</param>
        /// <param name="pos">
        /// An object specifying name-value pairs representing dimensions to set.
        /// <see href="http://js.cytoscape.org/#nodes.positions" />
        /// </param>
        abstract positions: handler: U2<ElementPositionFunction, Position> -> NodeCollectionPosition
        abstract modelPositions: handler: U2<ElementPositionFunction, Position> -> NodeCollectionPosition
        abstract points: handler: U2<ElementPositionFunction, Position> -> NodeCollectionPosition
        /// <summary>
        /// Allow the user to grab the nodes.
        /// <see href="http://js.cytoscape.org/#nodes.grabify" />
        /// </summary>
        abstract grabify: unit -> NodeCollectionPosition
        /// <summary>
        /// Disallow the user to grab the nodes.
        /// <see href="http://js.cytoscape.org/#nodes.ungrabify" />
        /// </summary>
        abstract ungrabify: unit -> NodeCollectionPosition
        /// <summary>
        /// Lock the nodes such that their positions can not be changed.
        /// <see href="http://js.cytoscape.org/#nodes.lock" />
        /// </summary>
        abstract lock: unit -> NodeCollectionPosition
        /// <summary>
        /// Unlock the nodes such that their positions can be changed.
        /// <see href="http://js.cytoscape.org/#nodes.unlock" />
        /// </summary>
        abstract unlock: unit -> NodeCollectionPosition

    /// <summary><see href="http://js.cytoscape.org/#collection/position--dimensions" /></summary>
    type [<AllowNullLiteral>] SingularPosition =
        /// Get the width of the element.
        abstract width: unit -> float
        /// Get the outer width of the element (includes width, padding, & border).
        abstract outerWidth: unit -> float
        /// Get the width of the element in rendered dimensions.
        abstract renderedWidth: unit -> float
        /// Get the outer width of the element (includes width, padding, & border) in rendered dimensions.
        abstract renderedOuterWidth: unit -> float
        /// Get the height of the element.
        abstract height: unit -> float
        /// Get the outer height of the element (includes height, padding, & border).
        abstract outerHeight: unit -> float
        /// Get the height of the element in rendered dimensions.
        abstract renderedHeight: unit -> float
        /// Get the outer height of the element (includes height, padding, & border) in rendered dimensions.
        abstract renderedOuterHeight: unit -> float
        /// <summary>
        /// Gets whether the element is active (e.g. on user tap, grab, etc).
        /// <see href="http://js.cytoscape.org/#ele.active" />
        /// </summary>
        abstract active: unit -> bool

    type [<AllowNullLiteral>] BoundingBoxOptions =
        /// A boolean indicating whether to include nodes in the bounding box (default true).
        abstract includeNodes: bool option with get, set
        /// A boolean indicating whether to include edges in the bounding box (default true).
        abstract includeEdges: bool option with get, set
        /// A boolean indicating whether to include labels in the bounding box (default true).
        abstract includeLabels: bool option with get, set
        /// A boolean indicating whether to include main (node or edge) labels in the bounding box (default true).
        abstract includeMainLabels: bool option with get, set
        /// A boolean indicating whether to include (edge) source-labels in the bounding box (default true).
        abstract includeSourceLabels: bool option with get, set
        /// A boolean indicating whether to include (edge) target-labels in the bounding box (default true).
        abstract includeTargetLabels: bool option with get, set
        /// A boolean indicating whether to include overlays (such as the one which appears when a node is clicked) in the bounding box (default true).
        abstract includeOverlays: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#collection/position--dimensions" /></summary>
    type [<AllowNullLiteral>] CollectionPosition =
        /// <summary>Get the bounding box of the elements in model coordinates.</summary>
        /// <param name="options">
        /// An object containing options for the function.
        /// <see href="http://js.cytoscape.org/#eles.boundingBox" />
        /// </param>
        abstract boundingBox: options: BoundingBoxOptions -> obj
        abstract boundingbox: options: BoundingBoxOptions -> obj
        /// <summary>Get the bounding box of the elements in rendered coordinates.</summary>
        /// <param name="options">An object containing options for the function.</param>
        abstract renderedBoundingBox: options: BoundingBoxOptions -> obj
        abstract renderedBoundingbox: options: BoundingBoxOptions -> obj

    /// <summary><see href="http://js.cytoscape.org/#collection/layout" /></summary>
    type [<AllowNullLiteral>] CollectionLayout =
        /// <summary>
        /// Get a new layout, which can be used to algorithmically position the nodes in the collection.
        /// This function is useful for running a layout on a subset of the elements in the graph, perhaps in parallel to other layouts.
        /// 
        /// You must specify options.name with the name of the layout you wish to use.
        /// 
        /// Note: that you must call layout.run() in order for it to affect the graph.
        /// </summary>
        /// <param name="options">The layout options.</param>
        abstract layout: options: LayoutOptions -> Layouts
        abstract makeLayout: options: LayoutOptions -> Layouts
        abstract createLayout: options: LayoutOptions -> Layouts

    /// <summary><see href="http://js.cytoscape.org/#collection/layout" /></summary>
    type [<AllowNullLiteral>] LayoutPositionOptions =
        abstract animate: bool option with get, set
        abstract animationDuration: float option with get, set
        abstract animationEasing: Css.TransitionTimingFunction option with get, set
        abstract eles: CollectionArgument with get, set
        abstract fit: bool option with get, set
        abstract padding: float option with get, set
        abstract pan: Position option with get, set
        abstract ready: obj option with get, set
        abstract stop: obj option with get, set
        abstract spacingFactor: float option with get, set
        abstract zoom: float option with get, set

    type [<AllowNullLiteral>] NodeCollectionLayout =
        /// <summary>
        /// Position the nodes for a discrete/synchronous layout.
        /// <see href="http://js.cytoscape.org/#nodes.layoutPositions" />
        /// </summary>
        /// <param name="layout">The layout.</param>
        /// <param name="options">The layout options object.</param>
        abstract layoutPositions: layout: string * options: LayoutPositionOptions * handler: ElementPositionFunction -> unit

    /// <summary><see href="http://js.cytoscape.org/#collection/layout" /></summary>
    type [<AllowNullLiteral>] LayoutDimensionOptions =
        abstract nodeDimensionsIncludeLabels: bool with get, set

    type [<AllowNullLiteral>] NodeSingularLayout =
        /// <summary>
        /// Returns the node width and height.
        /// Meant for use in layout positioning to do overlap detection.
        /// </summary>
        /// <param name="options">The layout options object.</param>
        abstract layoutDimensions: options: LayoutDimensionOptions -> NodeSingularLayoutLayoutDimensionsReturn

    type [<AllowNullLiteral>] NodeSingularLayoutLayoutDimensionsReturn =
        abstract x: float with get, set
        abstract y: float with get, set

    /// <summary><see href="http://js.cytoscape.org/#collection/selection" /></summary>
    type [<AllowNullLiteral>] SingularSelection =
        /// <summary>
        /// Get whether the element is selected.
        /// <see href="http://js.cytoscape.org/#ele.selected" />
        /// </summary>
        abstract selected: unit -> bool
        /// <summary>
        /// Get whether the element's selection state is mutable.
        /// <see href="http://js.cytoscape.org/#ele.selectable" />
        /// </summary>
        abstract selectable: unit -> bool

    /// <summary><see href="http://js.cytoscape.org/#collection/layout" /></summary>
    type [<AllowNullLiteral>] CollectionSelection =
        /// <summary>
        /// Make the elements selected (NB other elements outside the collection are not affected).
        /// <see href="http://js.cytoscape.org/#eles.select" />
        /// </summary>
        abstract select: unit -> CollectionSelection
        /// <summary>
        /// Make the elements not selected (NB other elements outside the collection are not affected).
        /// <see href="http://js.cytoscape.org/#eles.unselect" />
        /// </summary>
        abstract unselect: unit -> CollectionSelection
        abstract deselect: unit -> CollectionSelection
        /// <summary>
        /// Make the selection states of the elements mutable.
        /// <see href="http://js.cytoscape.org/#eles.selectify" />
        /// </summary>
        abstract selectify: unit -> CollectionSelection
        /// <summary>
        /// Make the selection states of the elements immutable.
        /// <see href="http://js.cytoscape.org/#eles.unselectify" />
        /// </summary>
        abstract unselectify: unit -> CollectionSelection

    /// <summary><see href="http://js.cytoscape.org/#collection/style" /></summary>
    type ClassName =
        string

    /// A space-separated list of class names or an array
    type ClassNames =
        U2<string, ResizeArray<ClassName>>

    type [<AllowNullLiteral>] CollectionStyle =
        /// <summary>
        /// Add classes to elements.
        /// <see href="http://js.cytoscape.org/#eles.addClass" />
        /// </summary>
        /// <param name="classes">A space-separated list of class names to add to the elements.</param>
        abstract addClass: classes: ClassNames -> CollectionStyle
        /// <summary>Remove classes from elements.</summary>
        /// <param name="classes">
        /// A space-separated list of class names to remove from the elements.
        /// <see href="http://js.cytoscape.org/#eles.removeClass" />
        /// </param>
        abstract removeClass: classes: ClassNames -> CollectionStyle
        /// <summary>Toggle whether the elements have the specified classes.</summary>
        /// <param name="classes">A space-separated list of class names to toggle on the elements.</param>
        /// <param name="toggle">
        /// [optional] Instead of automatically toggling, adds the classes on truthy values or removes them on falsey values.
        /// <see href="http://js.cytoscape.org/#eles.toggleClass" />
        /// </param>
        abstract toggleClass: classes: ClassNames * ?toggle: bool -> CollectionStyle
        /// <summary>Replace the current list of classes on the elements with the specified list.</summary>
        /// <param name="classes">
        /// A space-separated list of class names that replaces the current class list.
        /// <see href="http://js.cytoscape.org/#eles.classes" />
        /// Note: can be used to clear all classes (no arguments).
        /// </param>
        abstract classes: ?classes: ClassNames -> CollectionStyle
        /// <summary>Add classes to the elements, and then remove the classes after a specified duration.</summary>
        /// <param name="classes">A space-separated list of class names to flash on the elements.</param>
        /// <param name="duration">
        /// [optional] The duration in milliseconds that the classes should be added on the elements. After the duration, the classes are removed.
        /// <see href="http://js.cytoscape.org/#eles.flashClass" />
        /// </param>
        abstract flashClass: classes: ClassNames * ?duration: float -> CollectionStyle
        /// <summary>Set a particular style property value.</summary>
        /// <param name="name">The name of the visual style property to set.</param>
        /// <param name="value">The value to which the property is set.</param>
        abstract style: name: string * value: obj option -> CollectionStyle
        /// <summary>Get a particular style property value.</summary>
        /// <param name="name">The name of the visual style property to get.</param>
        abstract style: name: string -> obj option
        /// <summary>Set several particular style property values.</summary>
        /// <param name="obj">An object of style property name-value pairs to set.</param>
        abstract style: obj: obj -> CollectionStyle
        /// Get a name-value pair object containing visual style properties and their values for the element.
        abstract style: unit -> CollectionStyleStyleReturn
        /// <summary>Set a particular style property value.</summary>
        /// <param name="name">The name of the visual style property to set.</param>
        /// <param name="value">The value to which the property is set.</param>
        abstract css: name: string * value: obj option -> CollectionStyle
        /// <summary>Get a particular style property value.</summary>
        /// <param name="name">The name of the visual style property to get.</param>
        abstract css: name: string -> obj option
        /// <summary>Set several particular style property values.</summary>
        /// <param name="obj">An object of style property name-value pairs to set.</param>
        abstract css: obj: obj -> CollectionStyle
        /// Get a name-value pair object containing visual style properties and their values for the element.
        abstract css: unit -> CollectionStyleCssReturn
        /// <summary>Remove all or specific style overrides.</summary>
        /// <param name="names">A space-separated list of property names to remove overrides</param>
        abstract removeStyle: ?names: string -> CollectionStyle

    type [<AllowNullLiteral>] CollectionStyleStyleReturn =
        [<EmitIndexer>] abstract Item: index: string -> obj option with get, set

    type [<AllowNullLiteral>] CollectionStyleCssReturn =
        [<EmitIndexer>] abstract Item: index: string -> obj option with get, set

    /// <summary><see href="http://js.cytoscape.org/#collection/style" /></summary>
    type [<AllowNullLiteral>] SingularStyle =
        /// <summary>Get whether an element has a particular class.</summary>
        /// <param name="className">
        /// The name of the class to test for.
        /// <see href="http://js.cytoscape.org/#ele.hasClass" />
        /// </param>
        abstract hasClass: className: ClassName -> bool
        /// <summary>
        /// Get a name-value pair object containing rendered visual
        /// style properties and their values for the element.
        /// </summary>
        /// <param name="name">The name of the visual style property to get.</param>
        abstract renderedStyle: unit -> SingularStyleRenderedStyleReturn
        abstract renderedStyle: name: string -> obj option
        abstract renderedCss: unit -> SingularStyleRenderedCssReturn
        abstract renderedCss: name: string -> obj option
        /// <summary>
        /// Get the numeric value of a style property in
        /// preferred units that can be used for calculations.
        /// </summary>
        /// <param name="name">
        /// The name of the style property to get.
        /// <see href="http://js.cytoscape.org/#ele.numericStyle" />
        /// </param>
        abstract numericStyle: name: string -> obj option
        /// <summary>Get the units that ele.numericStyle() is expressed in, for a particular property.</summary>
        /// <param name="name">
        /// The name of the style property to get.
        /// <see href="http://js.cytoscape.org/#ele.numericStyleUnits" />
        /// </param>
        abstract numericStyleUnits: name: string -> obj option
        /// <summary>
        /// Get whether the element is visible.
        /// <see href="http://js.cytoscape.org/#ele.visible" />
        /// </summary>
        abstract visible: unit -> bool
        /// <summary>
        /// Get whether the element is hidden.
        /// <see href="http://js.cytoscape.org/#ele.visible" />
        /// </summary>
        abstract hidden: unit -> bool
        /// <summary>
        /// Get the effective opacity of the element
        ///   (i.e. on-screen opacity),
        /// which takes into consideration parent node opacity.
        /// <see href="http://js.cytoscape.org/#ele.effectiveOpacity" />
        /// </summary>
        abstract effectiveOpacity: unit -> float
        /// <summary>
        /// Get whether the element's effective opacity is completely transparent,
        /// which takes into consideration parent node opacity.
        /// <see href="http://js.cytoscape.org/#ele.transparent" />
        /// </summary>
        abstract transparent: unit -> float

    type [<AllowNullLiteral>] SingularStyleRenderedStyleReturn =
        [<EmitIndexer>] abstract Item: name: string -> obj option with get, set

    type [<AllowNullLiteral>] SingularStyleRenderedCssReturn =
        [<EmitIndexer>] abstract Item: name: string -> obj option with get, set

    /// <summary><see href="http://js.cytoscape.org/#collection/animation" /></summary>
    type [<AllowNullLiteral>] ElementAnimateOptionsBase =
        /// An object containing name-value pairs of style properties to animate.
        abstract style: ElementAnimateOptionsBaseStyle option with get, set
        /// The duration of the animation in milliseconds.
        abstract duration: float option with get, set
        /// A boolean indicating whether to queue the animation.
        abstract queue: bool option with get, set
        /// A function to call when the animation is done.
        abstract complete: unit -> unit
        /// A function to call each time the animation steps.
        abstract step: unit -> unit
        /// A transition-timing-function easing style string that shapes the animation progress curve.
        abstract easing: Css.TransitionTimingFunction option with get, set

    type [<AllowNullLiteral>] ElementAnimateOptionPos =
        inherit ElementAnimateOptionsBase
        /// A position to which the elements will be animated.
        abstract position: Position option with get, set

    type [<AllowNullLiteral>] ElementAnimateOptionRen =
        inherit ElementAnimateOptionsBase
        /// A rendered position to which the elements will be animated.
        abstract renderedPosition: Position option with get, set

    type [<AllowNullLiteral>] CollectionAnimation =
        /// <summary>Animate the elements.</summary>
        /// <param name="options">
        /// An object containing the details of the animation.
        /// <see href="http://js.cytoscape.org/#eles.animate" />
        /// </param>
        abstract animate: options: U2<ElementAnimateOptionPos, ElementAnimateOptionRen> * ?``params``: ElementAnimateOptionsBase -> CollectionAnimation
        /// <summary>Add a delay between animations for the elements.</summary>
        /// <param name="duration">How long the delay should be in milliseconds.</param>
        /// <param name="complete">
        /// A function to call when the delay is complete.
        /// <see href="http://js.cytoscape.org/#eles.delay" />
        /// </param>
        abstract delay: duration: float * ?complete: (unit -> unit) -> CollectionAnimation
        /// <summary>Stop all animations that are currently running.</summary>
        /// <param name="clearQueue">A boolean, indicating whether the queue of animations should be emptied.</param>
        /// <param name="jumpToEnd">
        /// A boolean, indicating whether the currently-running animations should jump to their ends rather than just stopping midway.
        /// <see href="http://js.cytoscape.org/#eles.stop" />
        /// </param>
        abstract stop: ?clearQueue: bool * ?jumpToEnd: bool -> CollectionAnimation
        /// <summary>
        /// Remove all queued animations for the elements.
        /// <see href="http://js.cytoscape.org/#eles.clearQueue" />
        /// </summary>
        abstract clearQueue: unit -> CollectionAnimation

    type [<AllowNullLiteral>] SingularAnimationOptionsBase =
        /// A position to which the elements will be animated.
        abstract position: Position with get, set
        /// A rendered position to which the elements will be animated.
        abstract renderedPosition: Position with get, set
        /// An object containing name-value pairs of style properties to animate.
        abstract style: obj option with get, set
        /// The duration of the animation in milliseconds.
        abstract duration: float with get, set
        /// A transition-timing-function easing style string that shapes the animation progress curve.
        abstract easing: Css.TransitionTimingFunction with get, set

    type [<AllowNullLiteral>] SingularAnimationOptionsPos =
        inherit SingularAnimationOptionsBase
        /// A position to which the elements will be animated.
        abstract position: Position with get, set

    type [<AllowNullLiteral>] SingularAnimationOptionsRen =
        inherit SingularAnimationOptionsBase
        /// A rendered position to which the elements will be animated.
        abstract renderedPosition: Position with get, set

    type [<AllowNullLiteral>] SingularAnimation =
        /// Get whether the element is currently being animated.
        abstract animated: unit -> bool
        /// <summary>Get an animation for the element.</summary>
        /// <param name="options">An object containing the details of the animation.</param>
        abstract animation: options: U2<SingularAnimationOptionsRen, SingularAnimationOptionsPos> -> AnimationManipulation
        /// <summary>Get a delay animation for the element.</summary>
        /// <param name="duration">
        /// How long the delay should be in milliseconds.
        /// <see href="http://js.cytoscape.org/#ele.delayAnimation" />
        /// </param>
        abstract delayAnimation: duration: float -> AnimationManipulation

    /// <summary><see href="http://js.cytoscape.org/#collection/comparison" /></summary>
    type [<AllowNullLiteral>] CollectionComparision =
        /// <summary>Determine whether this collection contains exactly the same elements as another collection.</summary>
        /// <param name="eles">The other elements to compare to.</param>
        abstract same: eles: CollectionArgument -> bool
        /// <summary>Determine whether this collection contains any of the same elements as another collection.</summary>
        /// <param name="eles">The other elements to compare to.</param>
        abstract anySame: eles: CollectionArgument -> bool
        /// Determine whether this collection contains all of the elements of another collection.
        abstract contains: eles: CollectionArgument -> bool
        /// Determine whether this collection contains all of the elements of another collection.
        abstract has: eles: CollectionArgument -> bool
        /// <summary>Determine whether all elements in the specified collection are in the neighbourhood of the calling collection.</summary>
        /// <param name="eles">The other elements to compare to.</param>
        abstract allAreNeighbors: eles: CollectionArgument -> bool
        /// <summary>Determine whether all elements in the specified collection are in the neighbourhood of the calling collection.</summary>
        /// <param name="eles">The other elements to compare to.</param>
        abstract allAreNeighbours: eles: CollectionArgument -> bool
        /// <summary>Determine whether any element in this collection matches a selector.</summary>
        /// <param name="selector">The selector to match against.</param>
        abstract is: selector: Selector -> bool
        /// <summary>Determine whether all elements in the collection match a selector.</summary>
        /// <param name="selector">The selector to match against.</param>
        abstract allAre: selector: Selector -> bool
        /// <summary>Determine whether any element in this collection satisfies the specified test function.</summary>
        /// <param name="test">
        /// The test function that returns truthy values for elements that satisfy the test and falsey values for elements that do not satisfy the test.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being tested.
        /// </param>
        /// <param name="thisArg">[optional] The value for this within the test function.</param>
        abstract some: test: (CollectionArgument -> float -> CollectionArgument -> bool) * ?thisArg: obj -> bool
        /// <summary>Determine whether all elements in this collection satisfy the specified test function.</summary>
        /// <param name="test">
        /// The test function that returns truthy values for elements that satisfy the test and falsey values for elements that do not satisfy the test.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being tested.
        /// </param>
        /// <param name="thisArg">[optional] The value for this within the test function.</param>
        abstract every: test: (CollectionArgument -> float -> CollectionArgument -> bool) * ?thisArg: obj -> bool

    /// <summary><see href="http://js.cytoscape.org/#collection/iteration" /></summary>
    type [<AllowNullLiteral>] CollectionIteration<'TOut, 'TIn> =
        /// Get the number of elements in the collection.
        abstract size: unit -> float
        /// Get the number of elements in the collection.
        abstract length: float with get, set
        /// Get whether the collection is empty, meaning it has no elements.
        abstract empty: unit -> bool
        /// Get whether the collection is nonempty, meaning it has elements.
        abstract nonempty: unit -> bool
        /// <summary>
        /// Iterate over the elements in the collection using an implementation like the native array function namesake.
        /// 
        /// This function behaves like Array.prototype.forEach() with minor changes for convenience:
        /// You can exit the iteration early by returning false in the iterating function.
        /// The Array.prototype.forEach() implementation does not support this, but it is included anyway on account of its utility.
        /// </summary>
        /// <param name="each">
        /// The function executed each iteration.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being iterated.
        /// </param>
        /// <param name="thisArg">[optional] The value for this within the iterating function.</param>
        abstract each: each: ('TIn -> float -> CollectionIteration<'TOut, 'TIn> -> U2<unit, bool>) * ?thisArg: obj -> CollectionIteration<'TOut, 'TIn>
        abstract forEach: each: ('TIn -> float -> CollectionIteration<'TOut, 'TIn> -> U2<unit, bool>) * ?thisArg: obj -> CollectionIteration<'TOut, 'TIn>
        /// <summary>
        /// Get an element at a particular index in the collection.
        /// 
        /// You may use eles[i] in place of eles.eq(i) as a more performant alternative.
        /// </summary>
        /// <param name="index">The index of the element to get.</param>
        abstract eq: index: float -> 'TOut
        /// <summary>Get an element at a particular index in the collection.</summary>
        /// <param name="index">The index of the element to get.</param>
        [<EmitIndexer>] abstract Item: index: float -> 'TOut with get, set
        /// Get the first element in the collection.
        abstract first: unit -> 'TOut
        /// Get the last element in the collection.
        abstract last: unit -> 'TOut
        /// <summary>Get a subset of the elements in the collection based on specified indices.</summary>
        /// <param name="start">
        /// [optional] An integer that specifies where to start the selection.
        /// The first element has an index of 0.
        /// Use negative numbers to select from the end of an array.
        /// </param>
        /// <param name="end">
        /// [optional] An integer that specifies where to end the selection.
        /// If omitted, all elements from the start position and to the end of the array will be selected.
        /// Use negative numbers to select from the end of an array.
        /// </param>
        abstract slice: ?start: float * ?``end``: float -> CollectionIteration<'TOut, 'TIn>
        /// Get the collection as an array, maintaining the order of the elements.
        abstract toArray: unit -> ResizeArray<'TOut>

    /// <summary>Get a new collection, resulting from adding the collection with another one</summary>
    /// <param name="eles">
    /// The elements or array of elements to add or elements in the graph matching the selector.
    /// <see href="http://js.cytoscape.org/#eles.union" />
    /// </param>
    type [<AllowNullLiteral>] CollectionBuildingUnionFunc =
        /// <summary>Get a new collection, resulting from adding the collection with another one</summary>
        /// <param name="eles">
        /// The elements or array of elements to add or elements in the graph matching the selector.
        /// <see href="http://js.cytoscape.org/#eles.union" />
        /// </param>
        [<Emit "$0($1...)">] abstract Invoke: eles: U3<CollectionArgument, ResizeArray<CollectionArgument>, Selector> -> CollectionReturnValue

    /// <summary>
    /// Get a new collection, resulting from the collection without some specified elements.
    /// <see href="http://js.cytoscape.org/#eles.difference" />
    /// </summary>
    /// <param name="eles">
    /// The elements that will not be in the resultant collection.
    /// Elements from the calling collection matching this selector will not be in the resultant collection.
    /// </param>
    type [<AllowNullLiteral>] CollectionBuildingDifferenceFunc =
        /// <summary>
        /// Get a new collection, resulting from the collection without some specified elements.
        /// <see href="http://js.cytoscape.org/#eles.difference" />
        /// </summary>
        /// <param name="eles">
        /// The elements that will not be in the resultant collection.
        /// Elements from the calling collection matching this selector will not be in the resultant collection.
        /// </param>
        [<Emit "$0($1...)">] abstract Invoke: eles: U2<CollectionArgument, Selector> -> CollectionReturnValue

    /// <summary>
    /// Get the elements in both this collection and another specified collection.
    /// <see href="http://js.cytoscape.org/#eles.intersection" />
    /// </summary>
    /// <param name="eles">
    /// The elements to intersect with.
    /// A selector representing the elements to intersect with.
    /// All elements in the graph matching the selector are used as the passed collection.
    /// </param>
    type [<AllowNullLiteral>] CollectionBuildingIntersectionFunc =
        /// <summary>
        /// Get the elements in both this collection and another specified collection.
        /// <see href="http://js.cytoscape.org/#eles.intersection" />
        /// </summary>
        /// <param name="eles">
        /// The elements to intersect with.
        /// A selector representing the elements to intersect with.
        /// All elements in the graph matching the selector are used as the passed collection.
        /// </param>
        [<Emit "$0($1...)">] abstract Invoke: eles: U2<CollectionArgument, Selector> -> CollectionReturnValue

    /// <summary>
    /// Get the elements that are in the calling collection or the passed collection but not in both.
    /// <see href="http://js.cytoscape.org/#eles.symmetricDifference" />
    /// </summary>
    /// <param name="eles">
    /// The elements to apply the symmetric difference with.
    /// A selector representing the elements to apply the symmetric difference with.
    /// All elements in the graph matching the selector are used as the passed collection.
    /// </param>
    type [<AllowNullLiteral>] CollectionSymmetricDifferenceFunc =
        /// <summary>
        /// Get the elements that are in the calling collection or the passed collection but not in both.
        /// <see href="http://js.cytoscape.org/#eles.symmetricDifference" />
        /// </summary>
        /// <param name="eles">
        /// The elements to apply the symmetric difference with.
        /// A selector representing the elements to apply the symmetric difference with.
        /// All elements in the graph matching the selector are used as the passed collection.
        /// </param>
        [<Emit "$0($1...)">] abstract Invoke: eles: U2<CollectionArgument, Selector> -> CollectionReturnValue

    /// <summary><see href="http://js.cytoscape.org/#collection/building--filtering" /></summary>
    type [<AllowNullLiteral>] CollectionBuildingFiltering<'TIn, 'TOut> =
        /// <summary>Get an element in the collection from its ID in a very performant way.</summary>
        /// <param name="id">The ID of the element to get.</param>
        abstract getElementById: id: string -> 'TOut
        /// <summary>Get an element in the collection from its ID in a very performant way.</summary>
        /// <param name="id">The ID of the element to get.</param>
        abstract ``$id``: id: string -> 'TOut
        /// <summary>
        /// Get a new collection, resulting from adding the collection with another one
        /// <see href="http://js.cytoscape.org/#eles.union" />
        /// </summary>
        abstract union: CollectionBuildingUnionFunc with get, set
        abstract u: CollectionBuildingUnionFunc with get, set
        abstract add: CollectionBuildingUnionFunc with get, set
        abstract ``+``: CollectionBuildingUnionFunc with get, set
        abstract ``or``: CollectionBuildingUnionFunc with get, set
        abstract ``|``: CollectionBuildingUnionFunc with get, set
        /// <summary>
        /// Get a new collection, resulting from the collection without some specified elements.
        /// <see href="http://js.cytoscape.org/#eles.difference" />
        /// </summary>
        abstract difference: CollectionBuildingDifferenceFunc with get, set
        abstract subtract: CollectionBuildingDifferenceFunc with get, set
        abstract ``\\``: CollectionBuildingDifferenceFunc with get, set
        abstract not: CollectionBuildingDifferenceFunc with get, set
        abstract ``!``: CollectionBuildingDifferenceFunc with get, set
        abstract relativeComplement: CollectionBuildingDifferenceFunc with get, set
        abstract ``-``: CollectionBuildingDifferenceFunc with get, set
        /// <summary>
        /// Get all elements in the graph that are not in the calling collection.
        /// <see href="http://js.cytoscape.org/#eles.absoluteComplement" />
        /// </summary>
        abstract absoluteComplement: unit -> CollectionReturnValue
        abstract abscomp: unit -> CollectionReturnValue
        abstract complement: unit -> CollectionReturnValue
        /// <summary>
        /// Get the elements in both this collection and another specified collection.
        /// <see href="http://js.cytoscape.org/#eles.intersection" />
        /// </summary>
        abstract intersection: CollectionBuildingIntersectionFunc with get, set
        abstract intersect: CollectionBuildingIntersectionFunc with get, set
        abstract ``and``: CollectionBuildingIntersectionFunc with get, set
        abstract n: CollectionBuildingIntersectionFunc with get, set
        abstract ``&``: CollectionBuildingIntersectionFunc with get, set
        abstract ``.``: CollectionBuildingIntersectionFunc with get, set
        /// <summary>
        /// Get the elements that are in the calling collection
        /// or the passed collection but not in both.
        /// <see href="http://js.cytoscape.org/#eles.symmetricDifference" />
        /// </summary>
        abstract symmetricDifference: CollectionSymmetricDifferenceFunc with get, set
        abstract symdiff: CollectionSymmetricDifferenceFunc with get, set
        abstract xor: CollectionSymmetricDifferenceFunc with get, set
        abstract ``^``: CollectionSymmetricDifferenceFunc with get, set
        abstract ``(+)``: CollectionSymmetricDifferenceFunc with get, set
        abstract ``(-)``: CollectionSymmetricDifferenceFunc with get, set
        /// <summary>Perform a traditional left/right diff on the two collections.</summary>
        /// <param name="selector">
        /// A selector representing the elements on the right side of the diff. All elements in the graph matching the selector are used as the passed collection.
        /// The elements on the right side of the diff.
        /// </param>
        /// <returns>
        /// This function returns a plain object of the form { left, right, both } where
        /// left - is the set of elements only in the calling (i.e. left) collection,
        /// right - is the set of elements only in the passed (i.e. right) collection, and
        /// both - is the set of elements in both collections.
        /// <see href="http://js.cytoscape.org/#eles.diff" />
        /// </returns>
        abstract diff: selector: U2<Selector, CollectionArgument> -> CollectionBuildingFilteringDiffReturn
        /// <summary>Perform a in-place merge of the given elements into the calling collection.</summary>
        /// <param name="eles">
        /// The elements to merge in-place or a selector representing the elements to merge.
        /// All elements in the graph matching the selector are used as the passed collection.
        /// 
        /// This function modifies the calling collection instead of returning a new one.
        /// Use of this function should be considered for performance in some cases, but otherwise should be avoided. Consider using eles.union() instead.
        /// Use this function only on new collections that you create yourself, using cy.collection().
        /// This ensures that you do not unintentionally modify another collection.
        /// 
        /// Examples
        /// With a collection:
        /// </param>
        /// <example>
        /// var col = cy.collection(); // new, empty collection
        /// var j = cy.$('#j');
        /// var e = cy.$('#e');
        /// col.merge( j ).merge( e );
        /// 
        /// With a selector:
        /// </example>
        /// <example>
        /// var col = cy.collection(); // new, empty collection
        /// col.merge('#j').merge('#e');
        /// </example>
        abstract merge: eles: U2<CollectionArgument, Selector> -> CollectionBuildingFiltering<'TIn, 'TOut>
        /// <summary>Perform an in-place operation on the calling collection to remove the given elements.</summary>
        /// <param name="eles">
        /// The elements to remove  in-place or a selector representing the elements to remove .
        /// All elements in the graph matching the selector are used as the passed collection.
        /// 
        /// This function modifies the calling collection instead of returning a new one.
        /// Use of this function should be considered for performance in some cases, but otherwise should be avoided. Consider using eles.filter() or eles.remove() instead.
        /// Use this function only on new collections that you create yourself, using cy.collection().
        /// This ensures that you do not unintentionally modify another collection.
        /// 
        /// Examples
        /// With a collection:
        /// </param>
        /// <example>
        /// var col = cy.collection(); // new, empty collection
        /// var e = cy.$('#e');
        /// col.merge( cy.nodes() );
        /// col.unmerge( e );
        /// 
        /// With a selector:
        /// </example>
        /// <example>
        /// var col = cy.collection(); // new, empty collection
        /// col.merge( cy.nodes() );
        /// col.unmerge('#e');
        /// </example>
        abstract unmerge: eles: U2<CollectionArgument, Selector> -> CollectionBuildingFiltering<'TIn, 'TOut>
        /// <summary>Get a new collection containing elements that are accepted by the specified filter.</summary>
        /// <param name="selector">The selector to match against.</param>
        /// <param name="filter">
        /// selector The filter function that returns true for elements to include.
        /// i - The index of the current element being considered.
        /// ele - The element being considered.
        /// <see href="http://js.cytoscape.org/#eles.filter" />
        /// </param>
        abstract filter: selector: U2<Selector, ('TIn -> float -> CollectionArgument -> bool)> -> CollectionReturnValue
        /// <summary>Get the nodes that match the specified selector.</summary>
        /// <param name="selector">
        /// The selector to match against.
        /// <see href="http://js.cytoscape.org/#eles.filter" />
        /// </param>
        abstract nodes: ?selector: Selector -> NodeCollection
        /// <summary>Get the edges that match the specified selector.</summary>
        /// <param name="selector">
        /// The selector to match against.
        /// <see href="http://js.cytoscape.org/#eles.filter" />
        /// </param>
        abstract edges: ?selector: Selector -> EdgeCollection
        /// <summary>
        /// Get a new collection containing the elements sorted by the
        /// specified comparison function.
        /// </summary>
        /// <param name="sort">
        /// The sorting comparison function that returns a negative number
        /// for ele1 before ele2, 0 for ele1 same as ele2,
        /// or a positive number for ele1 after ele2.
        /// 
        /// <see href="http://js.cytoscape.org/#eles.sort" />
        /// </param>
        abstract sort: sort: ('TIn -> 'TIn -> float) -> CollectionReturnValue
        /// <summary>Get an array containing values mapped from the collection.</summary>
        /// <param name="fn">
        /// The function that returns the mapped value for each element.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being mapped.
        /// </param>
        /// <param name="thisArg">
        /// [optional] The value for this within the iterating function.
        /// 
        /// <see href="http://js.cytoscape.org/#eles.map" />
        /// </param>
        abstract map: fn: ('TIn -> float -> CollectionArgument -> 'T) * ?thisArg: obj -> ResizeArray<'T>
        /// <summary>
        /// Reduce a single value by applying a
        /// function against an accumulator and each value of the collection.
        /// </summary>
        /// <param name="fn">
        /// The function that returns the accumulated value
        /// given the previous value and the current element.
        /// prevVal The value accumulated from previous elements.
        /// ele The current element.
        /// i The index of the current element.
        /// eles The collection of elements being reduced.
        /// </param>
        /// <param name="initialValue">
        /// The initial value for reducing
        /// It is used also for type inference of output, but the type can be
        /// also stated explicitly as generic
        /// <see href="http://js.cytoscape.org/#eles.reduce" />
        /// </param>
        abstract reduce: fn: ('T -> 'TIn -> float -> CollectionArgument -> 'T) * initialValue: 'T -> 'T
        /// <summary>Find a minimum value in a collection.</summary>
        /// <param name="fn">
        /// The function that returns the value to compare for each element.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being mapped.
        /// </param>
        /// <param name="thisArg">
        /// [optional] The value for this within the iterating function.
        /// 
        /// <see href="http://js.cytoscape.org/#eles.min" />
        /// </param>
        abstract min: fn: ('TIn -> float -> CollectionArgument -> 'T) * ?thisArg: obj -> CollectionBuildingFilteringMinReturn
        /// <summary>Find a maximum value and the corresponding element.</summary>
        /// <param name="fn">
        /// The function that returns the value to compare for each element.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being mapped.
        /// </param>
        /// <param name="thisArg">
        /// [optional] The value for this within the iterating function.
        /// 
        /// <see href="http://js.cytoscape.org/#eles.max" />
        /// </param>
        abstract max: fn: ('TIn -> float -> CollectionArgument -> 'T) * ?thisArg: obj -> CollectionBuildingFilteringMaxReturn

    type [<AllowNullLiteral>] CollectionBuildingFilteringDiffReturn =
        abstract left: CollectionReturnValue with get, set
        abstract right: CollectionReturnValue with get, set
        abstract both: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionBuildingFilteringMinReturn =
        /// The minimum value found.
        abstract value: 'T with get, set
        /// The element that corresponds to the minimum value.
        abstract ele: SingularElementReturnValue with get, set

    type [<AllowNullLiteral>] CollectionBuildingFilteringMaxReturn =
        /// The minimum value found.
        abstract value: 'T with get, set
        /// The element that corresponds to the minimum value.
        abstract ele: SingularElementReturnValue with get, set

    /// <summary><see href="http://js.cytoscape.org/#collection/traversing" /></summary>
    type MinumumSpanningTree =
        obj option

    type [<AllowNullLiteral>] CollectionTraversing =
        /// <summary>
        /// Get the open neighbourhood of the elements.
        /// 
        /// The neighbourhood returned by this function is a bit different than the traditional definition of a "neighbourhood":
        /// This returned neighbourhood includes the edges connecting the collection to the neighbourhood. This gives you more flexibility.
        /// An open neighbourhood is one that does not include the original set of elements. If unspecified, a neighbourhood is open by default.
        /// </summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract neighborhood: ?selector: Selector -> CollectionReturnValue
        /// <summary>
        /// Get the open neighbourhood of the elements.
        /// 
        /// The neighbourhood returned by this function is a bit different than the traditional definition of a "neighbourhood":
        /// This returned neighbourhood includes the edges connecting the collection to the neighbourhood. This gives you more flexibility.
        /// An open neighbourhood is one that does not include the original set of elements. If unspecified, a neighbourhood is open by default.
        /// </summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract openNeighborhood: ?selector: Selector -> CollectionReturnValue
        /// <summary>
        /// Get the closed neighbourhood of the elements.
        /// 
        /// The neighbourhood returned by this function is a bit different than the traditional definition of a "neighbourhood":
        /// This returned neighbourhood includes the edges connecting the collection to the neighbourhood. This gives you more flexibility.
        /// A closed neighbourhood is one that does include the original set of elements.
        /// </summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract closedNeighborhood: ?selector: Selector -> CollectionReturnValue
        /// Get the connected components, considering only the elements in the calling collection.
        /// An array of collections is returned, with each collection representing a component.
        abstract components: unit -> ResizeArray<CollectionReturnValue>

    /// <summary><see href="http://js.cytoscape.org/#collection/edge-points" /></summary>
    type [<AllowNullLiteral>] EdgeSingularPoints =
        /// Get an array of control point model positions for a {@code curve-style: bezier) or {@code curve-style: unbundled-bezier} edge.
        /// 
        /// While the control points may be specified relatively in the CSS,
        /// this function returns the absolute model positions of the control points.
        /// The points are specified in the order of source-to-target direction.
        /// This function works for bundled beziers, but it is not applicable to the middle, straight-line edge in the bundle.
        abstract controlPoints: unit -> ResizeArray<Position>
        /// Get an array of segment point model positions (i.e. bend points) for a {@code curve-style: segments} edge.
        /// 
        /// While the segment points may be specified relatively in the stylesheet,
        /// this function returns the absolute model positions of the segment points.
        /// The points are specified in the order of source-to-target direction.
        abstract segmentPoints: unit -> ResizeArray<Position>
        /// Get the model position of where the edge ends, towards the source node.
        abstract sourceEndpoint: unit -> Position
        /// Get the model position of where the edge ends, towards the target node.
        abstract targetEndpoint: unit -> Position
        /// Get the model position of the midpoint of the edge.
        /// 
        /// The midpoint is, by default, where the edge’s label is centred. It is also the position towards which mid arrows point.
        /// For curve-style: unbundled-bezier edges, the midpoint is the middle extremum if the number of control points is odd.
        /// For an even number of control points, the midpoint is where the two middle-most control points meet.
        /// This is the middle inflection point for bilaterally symmetric or skew symmetric edges, for example.
        /// For curve-style: segments edges, the midpoint is the middle segment point if the number of segment points is odd.
        /// For an even number of segment points, the overall midpoint is the midpoint of the middle-most line segment (i.e. the mean of the middle two segment points).
        abstract midpoint: unit -> Position

    type [<AllowNullLiteral>] EdgeSingularTraversing =
        /// <summary>Get source node of this edge.</summary>
        /// <param name="selector">
        /// An optional selector that is used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#edge.source" />
        /// </param>
        abstract source: ?selector: Selector -> NodeSingular
        /// <summary>Get target node of this edge.</summary>
        /// <param name="selector">
        /// An optional selector that is used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#edge.target" />
        /// </param>
        abstract target: ?selector: Selector -> NodeSingular

    type [<AllowNullLiteral>] EdgeCollectionTraversing =
        /// <summary>Get the nodes connected to the edges in the collection</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract connectedNodes: ?selector: Selector -> NodeCollection
        /// <summary>Get source nodes connected to the edges in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract sources: ?selector: Selector -> NodeCollection
        /// <summary>Get target nodes connected to the edges in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract targets: ?selector: Selector -> NodeCollection
        /// <summary>
        /// Get edges parallel to those in the collection.
        /// 
        /// Two edges are said to be parallel if they connect the same two nodes.
        /// Any two parallel edges may connect nodes in the same direction, in which case the edges share the same source and target.
        /// They may alternatively connect nodes in the opposite direction, in which case the source and target are reversed in the second edge.
        /// That is:
        /// - edge1.source().id() === edge2.source().id()
        ///    &amp;&amp; edge1.target().id() === edge2.target().id()
        /// OR
        /// - edge1.source().id() === edge2.target().id()
        ///    &amp;&amp; edge1.target().id() === edge2.source().id()
        /// </summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract parallelEdges: ?selector: Selector -> EdgeCollection
        /// <summary>
        /// Get edges codirected to those in the collection.
        /// 
        /// Two edges are said to be codirected if they connect the same two nodes in the same direction: The edges have the same source and target.
        /// That is:
        /// - edge1.source().id() === edge2.source().id()
        ///    &amp;&amp; edge1.target().id() === edge2.target().id()
        /// </summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract codirectedEdges: ?selector: Selector -> EdgeCollection

    type [<AllowNullLiteral>] NodeCollectionTraversing =
        /// <summary>Get the edges connecting the collection to another collection. Direction of the edges does not matter.</summary>
        /// <param name="eles">The other collection.</param>
        /// <param name="selector">The other collection, specified as a selector which is matched against all elements in the graph.</param>
        abstract edgesWith: eles: U2<CollectionArgument, Selector> -> EdgeCollection
        /// <summary>Get the edges coming from the collection (i.e. the source) going to another collection (i.e. the target).</summary>
        /// <param name="eles">The other collection.</param>
        /// <param name="selector">The other collection, specified as a selector which is matched against all elements in the graph.</param>
        abstract edgesTo: eles: U2<CollectionArgument, Selector> -> EdgeCollection
        /// <summary>Get the edges connected to the nodes in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract connectedEdges: ?selector: Selector -> EdgeCollection
        /// <summary>From the set of calling nodes, get the nodes which are roots (i.e. no incoming edges, as in a directed acyclic graph).</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract roots: ?selector: Selector -> NodeCollection
        /// <summary>From the set of calling nodes, get the nodes which are leaves (i.e. no outgoing edges, as in a directed acyclic graph).</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract leaves: ?selector: Selector -> NodeCollection
        /// <summary>Get edges (and their targets) coming out of the nodes in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract outgoers: ?selector: Selector -> CollectionReturnValue
        /// <summary>Recursively get edges (and their targets) coming out of the nodes in the collection (i.e. the outgoers, the outgoers' outgoers, ...).</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract successors: ?selector: Selector -> CollectionReturnValue
        /// <summary>Get edges (and their sources) coming into the nodes in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract incomers: ?selector: Selector -> CollectionReturnValue
        /// <summary>Recursively get edges (and their sources) coming into the nodes in the collection (i.e. the incomers, the incomers' incomers, ...).</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract predecessors: ?selector: Selector -> CollectionReturnValue

    /// <summary><see href="http://js.cytoscape.org/#collection/algorithms" /></summary>
    type [<AllowNullLiteral>] WeightFn =
        /// <summary><see href="http://js.cytoscape.org/#collection/algorithms" /></summary>
        [<Emit "$0($1...)">] abstract Invoke: edge: EdgeCollection -> float

    /// The handler returns true when it finds the desired node, and it returns false to cancel the search.
    /// v - The current node.
    /// e - The edge connecting the previous node to the current node.
    /// u - The previous node.
    /// i - The index indicating this node is the ith visited node.
    /// depth - How many edge hops away this node is from the root nodes.
    type [<AllowNullLiteral>] SearchVisitFunction =
        /// The handler returns true when it finds the desired node, and it returns false to cancel the search.
        /// v - The current node.
        /// e - The edge connecting the previous node to the current node.
        /// u - The previous node.
        /// i - The index indicating this node is the ith visited node.
        /// depth - How many edge hops away this node is from the root nodes.
        [<Emit "$0($1...)">] abstract Invoke: v: NodeSingular * e: EdgeSingular option * u: NodeSingular option * i: float * depth: float -> U2<bool, unit>

    type [<AllowNullLiteral>] SearchFirstOptionsBase =
        /// A handler function that is called when a node is visited in the search.
        abstract visit: SearchVisitFunction option with get, set
        /// A boolean indicating whether the algorithm should only go along edges from source to target (default false).
        abstract directed: bool option with get, set

    type [<AllowNullLiteral>] SearchFirstOptions1 =
        inherit SearchFirstOptionsBase
        /// The root nodes (selector or collection) to start the search from.
        abstract root: U2<Selector, CollectionArgument> with get, set

    type [<AllowNullLiteral>] SearchFirstOptions2 =
        inherit SearchFirstOptionsBase
        /// The root nodes (selector or collection) to start the search from.
        abstract roots: U2<Selector, CollectionArgument> with get, set

    type SearchFirstOptions =
        U2<SearchFirstOptions1, SearchFirstOptions2>

    type [<AllowNullLiteral>] SearchFirstResult =
        /// The path of the search.
        /// - The path returned includes edges such that if path[i] is a node, then path[i - 1] is the edge used to get to that node.
        abstract path: CollectionArgument with get, set
        /// The node found by the search
        /// - If no node was found, then found is empty.
        /// - If your handler function returns false, then the only the path up to that point is returned.
        abstract found: NodeCollection with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.dijkstra" /></summary>
    type [<AllowNullLiteral>] SearchDijkstraOptions =
        /// The root node (selector or collection) where the algorithm starts.
        abstract root: U2<Selector, CollectionArgument> with get, set
        /// A function that returns the positive numeric weight for this edge.
        /// 
        /// If no weight function is defined, a constant weight of 1 is used for each edge.
        abstract weight: WeightFn option with get, set
        /// A boolean indicating whether the algorithm should only go along edges from source to target (default false).
        abstract directed: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.dijkstra" /></summary>
    type [<AllowNullLiteral>] SearchDijkstraResult =
        /// Returns the distance from the source node to node.
        abstract distanceTo: node: NodeSingular -> float
        /// Returns a collection containing the shortest path from the source node to node.
        /// The path starts with the source node and includes the edges between the nodes in the path such that if pathTo(node)[i] is an edge,
        /// then pathTo(node)[i-1] is the previous node in the path and pathTo(node)[i+1] is the next node in the path.
        abstract pathTo: node: NodeSingular -> CollectionReturnValue

    /// <summary><see href="http://js.cytoscape.org/#eles.aStar" /></summary>
    type [<AllowNullLiteral>] SearchAStarOptions =
        abstract root: U2<Selector, CollectionArgument> with get, set
        abstract goal: U2<Selector, CollectionArgument> with get, set
        abstract weight: WeightFn option with get, set
        abstract heuristic: node: NodeCollection -> float
        abstract directed: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.aStar" /></summary>
    type [<AllowNullLiteral>] SearchAStarResult =
        abstract found: bool with get, set
        abstract distance: float with get, set
        abstract path: CollectionReturnValue with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.floydWarshall" /></summary>
    type [<AllowNullLiteral>] SearchFloydWarshallOptions =
        abstract weight: WeightFn with get, set
        abstract directed: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.floydWarshall" /></summary>
    type [<AllowNullLiteral>] SearchFloydWarshallResult =
        /// Returns the distance from the source node to node.
        abstract distance: fromNode: U2<NodeSingular, CollectionSelection> * toNode: U2<NodeSingular, Selector> -> float
        /// Returns a collection containing the shortest path from the source node to node.
        /// The path starts with the source node and includes the edges
        /// between the nodes in the path such that if pathTo(node)[i] is an edge,
        /// then pathTo(node)[i-1] is the previous node in the path and pathTo(node)[i+1]
        /// is the next node in the path.
        abstract path: fromNode: U2<NodeSingular, CollectionSelection> * toNode: U2<NodeSingular, Selector> -> CollectionReturnValue

    /// <summary><see href="http://js.cytoscape.org/#eles.bellmanFord" /></summary>
    type [<AllowNullLiteral>] SearchBellmanFordOptions =
        /// The root node (selector or collection) where the search starts.
        abstract root: obj option with get, set
        /// A function that returns the positive numeric weight for this edge.
        abstract weight: WeightFn option with get, set
        /// Indicating whether the algorithm should only go along
        /// edges from source to target (default false).
        abstract directed: bool with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.bellmanFord" /></summary>
    type [<AllowNullLiteral>] SearchBellmanFordResult =
        /// function that computes the shortest path from root node to the argument node
        /// (either objects or selector string)
        abstract pathTo: node: U2<NodeSingular, Selector> -> CollectionReturnValue
        /// function that computes the shortest distance from root node to argument node
        /// (either objects or selector string)
        abstract distanceTo: node: U2<NodeSingular, Selector> -> float
        abstract hasNegativeWeightCycle: bool with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.pageRank" /></summary>
    type [<AllowNullLiteral>] SearchPageRankOptions =
        /// Numeric parameter for the algorithm.
        abstract dampingFactor: float option with get, set
        /// Numeric parameter that represents the required precision.
        abstract precision: float option with get, set
        /// Maximum number of iterations to perform.
        abstract iterations: float option with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.pageRank" /></summary>
    type [<AllowNullLiteral>] SearchPageRankResult =
        /// function that computes the rank of a given node (either object or selector string)
        abstract rank: node: NodeCollection -> float

    /// <summary><see href="http://js.cytoscape.org/#eles.degreeCentrality" /></summary>
    type [<AllowNullLiteral>] SearchDegreeCentralityOptions =
        /// The root node (selector or collection) for which the
        /// centrality calculation is made.
        abstract root: U2<NodeSingular, Selector> with get, set
        /// A function that returns the weight for the edge.
        abstract weight: edge: EdgeSingular -> float
        /// The alpha value for the centrality calculation, ranging on [0, 1].
        /// With value 0 (default), disregards edge weights and solely uses
        /// number of edges in the centrality calculation. With value 1,
        /// disregards number of edges and solely uses the edge weights
        /// in the centrality calculation.
        abstract alpha: float option with get, set
        /// Whether the directed indegree and outdegree centrality is calculated (true) or
        /// whether the undirected centrality is calculated (false, default).
        abstract directed: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.degreeCentrality" /></summary>
    type [<AllowNullLiteral>] SearchDegreeCentralityResultUndirected =
        /// the degree centrality of the root node
        abstract degree: float with get, set

    type [<AllowNullLiteral>] SearchDegreeCentralityResultDirected =
        abstract indegree: float with get, set
        abstract outdegree: float with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.degreeCentralityNormalized" /></summary>
    type [<AllowNullLiteral>] SearchDegreeCentralityNormalizedOptions =
        /// A function that returns the weight for the edge.
        abstract weight: edge: EdgeSingular -> float
        /// The alpha value for the centrality calculation, ranging on [0, 1].
        /// With value 0 (default), disregards edge weights and solely uses
        /// number of edges in the centrality calculation. With value 1,
        /// disregards number of edges and solely uses the edge weights
        /// in the centrality calculation.
        abstract alpha: float option with get, set
        /// A boolean indicating whether the directed indegree and outdegree centrality is calculated (true) or
        /// whether the undirected centrality is calculated (false, default).
        abstract directed: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.degreeCentralityNormalized" /></summary>
    type [<AllowNullLiteral>] SearchDegreeCentralityNormalizedResultUndirected =
        /// the normalised degree centrality of the specified node
        abstract degree: node: NodeSingular -> obj option

    type [<AllowNullLiteral>] SearchDegreeCentralityNormalizedResultDirected =
        /// the normalised indegree centrality of the specified node
        abstract indegree: node: NodeSingular -> obj option
        /// the normalised outdegree centrality of the specified node
        abstract outdegree: node: NodeSingular -> obj option

    /// <summary><see href="http://js.cytoscape.org/#eles.closenessCentrality" /></summary>
    type [<AllowNullLiteral>] SearchClosenessCentralityOptions =
        /// The root node (selector or collection) for which the
        /// centrality calculation is made.
        abstract root: U2<NodeSingular, Selector> with get, set
        /// A function that returns the weight for the edge.
        abstract weight: edge: EdgeSingular -> float
        /// A boolean indicating whether the directed indegree and outdegree centrality is calculated (true) or
        /// whether the undirected centrality is calculated (false, default).
        abstract directed: bool option with get, set
        /// A boolean indicating whether the algorithm calculates the
        /// harmonic mean (true, default) or the arithmetic mean (false) of distances.
        /// The harmonic mean is very useful for graphs that are not strongly connected.
        abstract harmonic: bool option with get, set

    /// <summary>
    /// <see href="http://js.cytoscape.org/#eles.closenessCentralityNormalized" />
    /// <see href="http://js.cytoscape.org/#eles.closenessCentralityNormalized" />
    /// </summary>
    type [<AllowNullLiteral>] SearchClosenessCentralityNormalizedOptions =
        /// A function that returns the weight for the edge.
        abstract weight: edge: EdgeSingular -> float
        abstract directed: bool option with get, set
        /// A boolean indicating whether the algorithm calculates the
        /// harmonic mean (true, default) or the arithmetic mean (false) of distances.
        /// The harmonic mean is very useful for graphs that are not strongly connected.
        /// A boolean indicating whether the algorithm calculates the
        /// harmonic mean (true, default) or the arithmetic mean (false) of distances.
        /// The harmonic mean is very useful for graphs that are not strongly connected.
        abstract harmonic: bool option with get, set
        abstract directed: bool option with get, set
        /// A boolean indicating whether the algorithm calculates the
        /// harmonic mean (true, default) or the arithmetic mean (false) of distances.
        /// The harmonic mean is very useful for graphs that are not strongly connected.
        /// A boolean indicating whether the algorithm calculates the
        /// harmonic mean (true, default) or the arithmetic mean (false) of distances.
        /// The harmonic mean is very useful for graphs that are not strongly connected.
        abstract harmonic: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.betweennessCentrality" /></summary>
    type [<AllowNullLiteral>] SearchBetweennessOptions =
        /// A function that returns the weight for the edge.
        abstract weight: edge: EdgeSingular -> float
        /// A boolean indicating whether the directed indegree and outdegree centrality is calculated (true) or
        /// whether the undirected centrality is calculated (false, default).
        abstract directed: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#eles.betweennessCentrality" /></summary>
    type [<AllowNullLiteral>] SearchBetweennessResult =
        /// returns the betweenness centrality of the specified node
        abstract betweenness: node: NodeSingular -> float
        /// returns the normalised betweenness centrality of the specified node
        abstract betweennessNormalized: node: NodeSingular -> float
        abstract betweennessNormalised: node: NodeSingular -> float

    /// <summary>
    /// <see href="http://js.cytoscape.org/#eles.closenessCentralityNormalized" />
    /// trivial
    /// </summary>
    type [<AllowNullLiteral>] CollectionAlgorithms =
        /// <summary>Perform a breadth-first search within the elements in the collection.</summary>
        /// <param name="options"><see href="http://js.cytoscape.org/#eles.breadthFirstSearch" /></param>
        abstract breadthFirstSearch: options: SearchFirstOptions -> SearchFirstResult
        abstract bfs: options: SearchFirstOptions -> SearchFirstResult
        /// <summary>
        /// Perform a depth-first search within the elements in the collection.
        /// <see href="http://js.cytoscape.org/#eles.depthFirstSearch" />
        /// </summary>
        abstract depthFirstSearch: options: SearchFirstOptions -> SearchFirstResult
        abstract dfs: options: SearchFirstOptions -> SearchFirstResult
        /// <summary>
        /// Perform Dijkstra's algorithm on the elements in the collection.
        /// This finds the shortest paths to all other nodes in the collection from the root node.
        /// <see href="http://js.cytoscape.org/#eles.dijkstra" />
        /// </summary>
        abstract dijkstra: options: SearchDijkstraOptions -> SearchDijkstraResult
        /// <summary>
        /// Perform the A* search algorithm on the elements in the collection.
        /// This finds the shortest path from the root node to the goal node.
        /// <see href="http://js.cytoscape.org/#eles.aStar" />
        /// </summary>
        abstract aStar: options: SearchAStarOptions -> SearchAStarResult
        /// <summary>
        /// Perform the Floyd Warshall search algorithm on the elements in the collection.
        /// This finds the shortest path between all pairs of nodes.
        /// <see href="http://js.cytoscape.org/#eles.floydWarshall" />
        /// </summary>
        abstract floydWarshall: options: SearchFloydWarshallOptions -> SearchFloydWarshallResult
        /// <summary>
        /// Perform the Bellman-Ford search algorithm on the elements in the collection.
        /// This finds the shortest path from the starting node to all other nodes in the collection.
        /// <see href="http://js.cytoscape.org/#eles.bellmanFord" />
        /// </summary>
        abstract bellmanFord: options: SearchBellmanFordOptions -> SearchBellmanFordResult
        /// <summary>
        /// Perform Kruskal's algorithm on the elements in the collection,
        /// returning the minimum spanning tree, assuming undirected edges.
        /// <see href="http://js.cytoscape.org/#eles.kruskal" />
        /// </summary>
        abstract kruskal: handler: (EdgeCollection -> float) -> CollectionReturnValue
        /// <summary>
        /// Finds the minimum cut in a graph using the Karger-Stein algorithm.
        /// The optimal result is found with a high probability, but without guarantee.
        /// <see href="http://js.cytoscape.org/#eles.kargerStein" />
        /// </summary>
        abstract kargerStein: unit -> CollectionAlgorithmsKargerSteinReturn
        /// <summary>
        /// finds the biconnected components in an undirected graph,
        /// as well as their respective cut vertices, using an algorithm due to Hopcroft and Tarjan.
        /// <see href="http://js.cytoscape.org/#eles.hopcroftTarjanBiconnected" />
        /// </summary>
        abstract hopcroftTarjanBiconnected: unit -> CollectionAlgorithmsHopcroftTarjanBiconnectedReturn
        /// <summary>
        /// Finds the biconnected components in an undirected graph,
        /// as well as their respective cut vertices, using an algorithm due to Hopcroft and Tarjan.
        /// <see href="http://js.cytoscape.org/#eles.hopcroftTarjanBiconnected" />
        /// </summary>
        abstract hopcroftTarjanBiconnectedComponents: unit -> CollectionAlgorithmsHopcroftTarjanBiconnectedComponentsReturn
        /// <summary>
        /// Finds the biconnected components in an undirected graph,
        /// as well as their respective cut vertices, using an algorithm due to Hopcroft and Tarjan.
        /// <see href="http://js.cytoscape.org/#eles.hopcroftTarjanBiconnected" />
        /// </summary>
        abstract htb: unit -> CollectionAlgorithmsHtbReturn
        /// <summary>
        /// Finds the biconnected components in an undirected graph,
        /// as well as their respective cut vertices, using an algorithm due to Hopcroft and Tarjan.
        /// <see href="http://js.cytoscape.org/#eles.hopcroftTarjanBiconnected" />
        /// </summary>
        abstract htbc: unit -> CollectionAlgorithmsHtbcReturn
        /// <summary>
        /// Finds the strongly connected components of a directed graph using Tarjan's algorithm.
        /// <see href="http://js.cytoscape.org/#eles.tarjanStronglyConnected" />
        /// </summary>
        abstract tarjanStronglyConnected: unit -> CollectionAlgorithmsTarjanStronglyConnectedReturn
        /// <summary>
        /// Finds the strongly connected components of a directed graph using Tarjan's algorithm.
        /// <see href="http://js.cytoscape.org/#eles.tarjanStronglyConnected" />
        /// </summary>
        abstract tarjanStronglyConnectedComponents: unit -> CollectionAlgorithmsTarjanStronglyConnectedComponentsReturn
        /// <summary>
        /// Finds the strongly connected components of a directed graph using Tarjan's algorithm.
        /// <see href="http://js.cytoscape.org/#eles.tarjanStronglyConnected" />
        /// </summary>
        abstract tsc: unit -> CollectionAlgorithmsTscReturn
        /// <summary>
        /// Finds the strongly connected components of a directed graph using Tarjan's algorithm.
        /// <see href="http://js.cytoscape.org/#eles.tarjanStronglyConnected" />
        /// </summary>
        abstract tscc: unit -> CollectionAlgorithmsTsccReturn
        /// <summary>
        /// Rank the nodes in the collection using the Page Rank algorithm.
        /// <see href="http://js.cytoscape.org/#eles.pageRank" />
        /// </summary>
        abstract pageRank: options: SearchPageRankOptions -> SearchPageRankResult
        /// <summary>
        /// Considering only the elements in the calling collection,
        /// calculate the degree centrality of the specified root node.
        /// <see href="http://js.cytoscape.org/#eles.degreeCentrality" />
        /// </summary>
        abstract degreeCentrality: options: SearchDegreeCentralityOptions -> U2<SearchDegreeCentralityResultDirected, SearchDegreeCentralityResultUndirected>
        /// <summary>
        /// Considering only the elements in the calling collection,
        /// calculate the normalised degree centrality of the nodes.
        /// <see href="http://js.cytoscape.org/#eles.degreeCentralityNormalized" />
        /// </summary>
        abstract degreeCentralityNormalized: options: SearchDegreeCentralityNormalizedOptions -> U2<SearchDegreeCentralityNormalizedResultDirected, SearchDegreeCentralityNormalizedResultUndirected>
        /// <summary>
        /// Considering only the elements in the calling collection,
        /// calculate the closeness centrality of the specified root node.
        /// <see href="http://js.cytoscape.org/#eles.closenessCentrality" />
        /// </summary>
        abstract closenessCentrality: options: SearchClosenessCentralityOptions -> float
        /// <summary>
        /// Considering only the elements in the calling collection,
        /// calculate the closeness centrality of the nodes.
        /// <see href="http://js.cytoscape.org/#eles.closenessCentralityNormalized" />
        /// </summary>
        abstract closenessCentralityNormalized: options: SearchClosenessCentralityNormalizedOptions -> U2<SearchDegreeCentralityNormalizedResultDirected, SearchDegreeCentralityNormalizedResultUndirected>
        /// <summary>
        /// Considering only the elements in the calling collection,
        /// calculate the betweenness centrality of the nodes.
        /// <see href="http://js.cytoscape.org/#eles.betweennessCentrality" />
        /// </summary>
        abstract betweennessCentrality: options: SearchBetweennessOptions -> SearchBetweennessResult

    type [<AllowNullLiteral>] CollectionAlgorithmsKargerSteinReturn =
        abstract cut: EdgeCollection with get, set
        abstract components: CollectionReturnValue with get, set
        abstract partitionFirst: NodeCollection with get, set
        abstract partitionSecond: NodeCollection with get, set

    type [<AllowNullLiteral>] CollectionAlgorithmsHopcroftTarjanBiconnectedReturn =
        abstract cut: NodeCollection with get, set
        abstract components: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionAlgorithmsHopcroftTarjanBiconnectedComponentsReturn =
        abstract cut: NodeCollection with get, set
        abstract components: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionAlgorithmsHtbReturn =
        abstract cut: NodeCollection with get, set
        abstract components: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionAlgorithmsHtbcReturn =
        abstract cut: NodeCollection with get, set
        abstract components: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionAlgorithmsTarjanStronglyConnectedReturn =
        abstract cut: EdgeCollection with get, set
        abstract components: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionAlgorithmsTarjanStronglyConnectedComponentsReturn =
        abstract cut: EdgeCollection with get, set
        abstract components: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionAlgorithmsTscReturn =
        abstract cut: EdgeCollection with get, set
        abstract components: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionAlgorithmsTsccReturn =
        abstract cut: EdgeCollection with get, set
        abstract components: CollectionReturnValue with get, set

    /// <summary><see href="http://js.cytoscape.org/#collection/compound-nodes" /></summary>
    type [<AllowNullLiteral>] NodeSingularCompound =
        /// <summary>
        /// Get whether the node is a compound parent
        /// (i.e. a node containing one or more child nodes)
        /// <see href="http://js.cytoscape.org/#node.isParent" />
        /// </summary>
        abstract isParent: unit -> bool
        /// <summary>
        /// Get whether the node is childless (i.e. a node with no child nodes)
        /// <see href="http://js.cytoscape.org/#node.isChildless" />
        /// </summary>
        abstract isChildless: unit -> bool
        /// <summary>
        /// Get whether the node is a compound child (i.e. contained within a node)
        ///   <see href="http://js.cytoscape.org/#node.isChild" />
        /// </summary>
        abstract isChild: unit -> bool
        /// <summary>
        /// Get whether the node is an orphan (i.e. a node with no parent)
        /// <see href="http://js.cytoscape.org/#node.isOrphan" />
        /// </summary>
        abstract isOrphan: unit -> bool

    /// <summary><see href="http://js.cytoscape.org/#collection/compound-nodes" /></summary>
    type [<AllowNullLiteral>] NodeCollectionCompound =
        /// <summary>Get the compound parent node of each node in the collection.</summary>
        /// <param name="selector">
        /// A selector used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#nodes.parent" />
        /// </param>
        abstract parent: ?selector: Selector -> NodeCollection
        /// <summary>
        /// Get all compound ancestor nodes
        /// (i.e. parents, parents' parents, etc.) of each node in the collection.
        /// </summary>
        /// <param name="selector">
        /// A selector used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#nodes.ancestors" />
        /// </param>
        abstract ancestors: ?selector: Selector -> NodeCollection
        abstract parents: ?selector: Selector -> NodeCollection
        /// <summary>
        /// Get all compound ancestors common to all the nodes in the collection,
        /// starting with the closest and getting progressively farther.
        /// </summary>
        /// <param name="selector">
        /// A selector used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#nodes.commonAncestors" />
        /// </param>
        abstract commonAncestors: ?selector: Selector -> NodeCollection
        /// <summary>Get all orphan (i.e. has no compound parent) nodes in the calling collection.</summary>
        /// <param name="selector">
        /// A selector used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#nodes.orphans" />
        /// </param>
        abstract orphans: ?selector: Selector -> NodeCollection
        /// <summary>Get all nonorphan (i.e. has a compound parent) nodes in the calling collection.</summary>
        /// <param name="selector">
        /// A selector used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#nodes.nonorphans" />
        /// </param>
        abstract nonorphans: ?selector: Selector -> NodeCollection
        /// <summary>Get all compound child (i.e. direct descendant) nodes of each node in the collection.</summary>
        /// <param name="selector">
        /// A selector used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#nodes.children" />
        /// </param>
        abstract children: ?selector: Selector -> NodeCollection
        /// <summary>
        /// Get all compound descendant (i.e. children, children's children, etc.)
        /// nodes of each node in the collection.
        /// </summary>
        /// <param name="selector">
        /// A selector used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#nodes.descendants" />
        /// </param>
        abstract descendants: ?selector: Selector -> NodeCollection
        /// <summary>
        /// Get all sibling (i.e. same compound parent)
        /// nodes of each node in the collection.
        /// </summary>
        /// <param name="selector">
        /// A selector used to filter the resultant collection.
        /// <see href="http://js.cytoscape.org/#nodes.siblings" />
        /// </param>
        abstract siblings: ?selector: Selector -> NodeCollection

    /// <summary>
    /// A selector functions similar to a CSS selector on DOM elements,
    /// but selectors in Cytoscape.js instead work on
    /// collections of graph elements.
    /// Note that wherever a selector may be specified
    /// as the argument to a function,
    /// a eles.filter()-style filter function may be
    /// used in place of the selector.
    /// 
    /// See <see href="http://js.cytoscape.org/#selectors" /> for
    /// details about writing selectors.
    /// Selectors are an island grammar.
    /// </summary>
    type Selector =
        string

    /// <summary>
    /// A space separated list of event names.
    /// <see href="http://js.cytoscape.org/#cy.promiseOn" />
    /// </summary>
    type EventNames =
        string

    /// <summary>
    /// A string indicating the selection behaviour from user input.
    /// <see href="http://js.cytoscape.org/#core/initialisation" />
    /// 
    /// 'additive' : a new selection made by the user adds to the set of currently selected elements.
    /// 'single' : a new selection made by the user becomes the entire set of currently
    ///             selected elements (i.e. the previous elements are unselected)
    /// </summary>
    type [<StringEnum>] [<RequireQualifiedAccess>] SelectionType =
        | Additive
        | Single

    /// <summary>
    /// <see href="http://js.cytoscape.org/#ele.group" />
    /// <see href="http://js.cytoscape.org/#notation/elements-json" />
    /// 
    /// 'nodes'
    /// 'edges'
    /// </summary>
    type [<StringEnum>] [<RequireQualifiedAccess>] ElementGroup =
        | Nodes
        | Edges

    /// 'x' : x coordinate
    /// 'y' : y coordinate
    type [<StringEnum>] [<RequireQualifiedAccess>] PositionDimension =
        | X
        | Y

    /// <summary>
    /// Usually temp or nonserialisable data can be stored.
    /// <see href="http://js.cytoscape.org/#notation/elements-json" />
    /// <see href="http://js.cytoscape.org/#cy.scratch" />
    /// <see href="http://js.cytoscape.org/#ele.scratch" />
    /// </summary>
    type Scratchpad =
        obj option

    /// <summary>
    /// Style in Cytoscape.js follows CSS conventions as closely as possible.
    /// In most cases, a property has the same name and behaviour as its corresponding CSS namesake.
    /// However, the properties in CSS are not sufficient to specify the style of some parts of the graph.
    /// In that case, additional properties are introduced that are unique to Cytoscape.js.
    /// 
    /// For simplicity and ease of use, specificity rules are completely ignored in stylesheets.
    /// For a given style property for a given element, the last matching selector wins.
    /// 
    /// <see href="http://js.cytoscape.org/#style" />
    /// </summary>
    module Css =

        type Colour =
            string

        /// <summary>
        /// In addition to specifying the value of a property outright, the developer may also use a mapper to dynamically specify the property value.
        /// - data()
        /// - mapData()
        /// - function( ele ){ ... }
        /// <see href="https://js.cytoscape.org/#style/mappers" />
        /// </summary>
        type [<AllowNullLiteral>] MapperFunction<'Element, 'Type> =
            /// <summary>
            /// In addition to specifying the value of a property outright, the developer may also use a mapper to dynamically specify the property value.
            /// - data()
            /// - mapData()
            /// - function( ele ){ ... }
            /// <see href="https://js.cytoscape.org/#style/mappers" />
            /// </summary>
            [<Emit "$0($1...)">] abstract Invoke: ele: 'Element -> 'Type

        type PropertyValue<'SingularType, 'Type> =
            U2<'Type, MapperFunction<'SingularType, 'Type>>

        type PropertyValueNode<'Type> =
            PropertyValue<NodeSingular, 'Type>

        type PropertyValueEdge<'Type> =
            PropertyValue<EdgeSingular, 'Type>

        type PropertyValueCore<'Type> =
            PropertyValue<Cytoscape.Core, 'Type>

        /// The shape of the node’s body.
        /// Note that each shape fits within the specified width and height,
        /// and so you may have to adjust width and height
        /// if you desire an equilateral shape
        /// (i.e. width !== height for several equilateral shapes).
        /// 'polygon' is a custom polygon specified via shape-polygon-points.
        type [<StringEnum>] [<RequireQualifiedAccess>] NodeShape =
            | Rectangle
            | Roundrectangle
            | Ellipse
            | Triangle
            | Pentagon
            | Hexagon
            | Heptagon
            | Octagon
            | Star
            | Barrel
            | Diamond
            | Vee
            | Rhomboid
            | Polygon
            | Tag
            | [<CompiledName "round-rectangle">] RoundRectangle
            | [<CompiledName "round-triangle">] RoundTriangle
            | [<CompiledName "round-diamond">] RoundDiamond
            | [<CompiledName "round-pentagon">] RoundPentagon
            | [<CompiledName "round-hexagon">] RoundHexagon
            | [<CompiledName "round-heptagon">] RoundHeptagon
            | [<CompiledName "round-octagon">] RoundOctagon
            | [<CompiledName "round-tag">] RoundTag
            | [<CompiledName "cut-rectangle">] CutRectangle
            | [<CompiledName "bottom-round-rectangle">] BottomRoundRectangle
            | [<CompiledName "concave-hexagon">] ConcaveHexagon

        /// A space-separated list of numbers ranging on [-1, 1],
        /// representing alternating x and y values (i.e. x1 y1 x2 y2, x3 y3 ...).
        /// This represents the points in the polygon for the node’s shape.
        /// The bounding box of the node is given by (-1, -1), (1, -1), (1, 1), (-1, 1).
        type ShapePolygonPoints =
            string

        /// The line style; may be solid, dotted, dashed, or double
        type [<StringEnum>] [<RequireQualifiedAccess>] LineStyle =
            | Solid
            | Dotted
            | Dashed
            | Double

        /// <summary><see href="http://js.cytoscape.org/#style/node-body" /></summary>
        type [<AllowNullLiteral>] Node =
            inherit obj
            inherit PaddingNode
            inherit obj
            inherit BackgroundImage
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            /// The CSS content field
            abstract content: PropertyValueNode<string> option with get, set
            /// The width of the node’s body.
            /// This property can take on the special value label
            /// so the width is automatically based on the node’s label.
            abstract width: PropertyValueNode<U2<float, string>> option with get, set
            /// The height of the node’s body.
            /// This property can take on the special value label
            /// so the height is automatically based on the node’s label.
            abstract height: PropertyValueNode<U2<float, string>> option with get, set
            /// The shape of the node’s body.
            abstract shape: PropertyValueNode<NodeShape> option with get, set
            abstract ``shape-polygon-points``: PropertyValueNode<ShapePolygonPoints> option with get, set
            abstract backgroundColor: PropertyValueNode<Colour> option with get, set
            /// The colour of the node’s body.
            abstract ``background-color``: PropertyValueNode<Colour> option with get, set
            /// Blackens the node’s body for values from 0 to 1;
            /// whitens the node’s body for values from 0 to -1.
            abstract ``background-blacken``: PropertyValueNode<float> option with get, set
            /// The opacity level of the node’s background colour.
            abstract ``background-opacity``: PropertyValueNode<float> option with get, set
            /// The size of the node’s border.
            abstract ``border-width``: PropertyValueNode<U2<float, string>> option with get, set
            /// The style of the node’s border.
            abstract ``border-style``: PropertyValueNode<LineStyle> option with get, set
            /// The colour of the node’s border.
            abstract ``border-color``: PropertyValueNode<Colour> option with get, set
            /// The opacity of the node’s border.
            /// A value between [0 1].
            abstract ``border-opacity``: PropertyValueNode<float> option with get, set

        /// A padding defines an addition to a node’s dimension.
        /// For example, padding-left adds to a node’s outer (i.e. total) width.
        /// This can be used to add spacing around the label of width: label; height: label; nodes,
        /// or it can be used to add spacing between a compound node parent and its children.
        type [<AllowNullLiteral>] PaddingNode =
            abstract ``padding-left``: PropertyValueNode<string> option with get, set
            abstract ``padding-right``: PropertyValueNode<string> option with get, set
            abstract ``padding-top``: PropertyValueNode<string> option with get, set
            abstract ``padding-bottom``: PropertyValueNode<string> option with get, set

        type [<AllowNullLiteral>] Dictionary =
            [<EmitIndexer>] abstract Item: key: string -> obj option with get, set

        /// <summary>
        /// A background image may be applied to a node’s body:
        /// 
        /// <see href="http://js.cytoscape.org/#style/background-image" />
        /// </summary>
        type [<AllowNullLiteral>] BackgroundImage =
            /// The URL that points to the image that should be used as the node’s background.
            /// PNG, JPG, and SVG are supported formats.
            /// You may use a data URI to use embedded images,
            /// thereby saving a HTTP request.
            abstract ``background-image``: PropertyValueNode<string> option with get, set
            /// <summary>
            /// All images are loaded with a crossorigin attribute which may be <c>anonymous</c> or
            /// <c>use-credentials</c>.
            /// 
            /// The default is set to <c>anonymous</c>.
            /// </summary>
            abstract ``background-image-crossorigin``: PropertyValueNode<BackgroundImageBackgroundImageCrossoriginPropertyValueNode> option with get, set
            /// The opacity of the background image. [0 1]
            abstract ``background-image-opacity``: PropertyValueNode<float> option with get, set
            /// <summary>
            /// Determines whether background image is smoothed (<c>yes</c>, default) or not (<c>no</c>).
            /// This is only a hint, and the browser may or may not respect the
            /// value set for this property.
            /// </summary>
            abstract ``background-image-smoothing``: PropertyValueNode<BackgroundImageBackgroundImageSmoothingPropertyValueNode> option with get, set
            /// <summary>
            /// Determines whether background image is within (<c>inside</c>)
            /// or over top of the node (<c>over</c>).
            /// 
            /// The default is set to <c>inside</c>.
            /// </summary>
            abstract ``background-image-containment``: PropertyValueNode<BackgroundImageBackgroundImageContainmentPropertyValueNode> option with get, set
            /// Specifies the width of the image.
            /// A percent value (e.g. 50%) may be used to set
            /// the image width relative to the node width.
            /// If used in combination with background- fit,
            /// then this value overrides the width of the image
            /// in calculating the fitting — thereby overriding the aspect ratio.
            /// The auto value is used by default, which uses the width of the image.
            abstract ``background-width``: PropertyValueNode<U2<float, string>> option with get, set
            /// Specifies the height of the image.
            /// A percent value (e.g. 50%) may be used to set the image
            /// height relative to the node height.
            /// If used in combination with background- fit,
            /// then this value overrides the height of the image in calculating
            /// the fitting — thereby overriding the aspect ratio.
            /// The auto value is used by default, which uses the height of the image.
            abstract ``background-height``: PropertyValueNode<U2<float, string>> option with get, set
            /// How the background image is fit to the node;
            /// may be none for original size,
            /// contain to fit inside node,
            /// or cover to cover the node.
            abstract ``background-fit``: PropertyValueNode<BackgroundImageBackgroundFitPropertyValueNode> option with get, set
            /// Whether to repeat the background image;
            /// may be no-repeat, repeat-x, repeat-y, or repeat.
            abstract ``background-repeat``: PropertyValueNode<BackgroundImageBackgroundRepeatPropertyValueNode> option with get, set
            /// <summary>
            /// The x position of the background image,
            /// measured in percent(e.g. <c>'50%'</c>) or pixels (e.g. <c>'10px'</c>).
            /// </summary>
            abstract ``background-position-x``: PropertyValueNode<U2<float, string>> option with get, set
            /// <summary>
            /// The y position of the background image,
            /// measured in percent(e.g. <c>'50%'</c>) or pixels (e.g. <c>'10px'</c>).
            /// </summary>
            abstract ``background-position-y``: PropertyValueNode<U2<float, string>> option with get, set
            /// <summary>
            /// The x offset of the background image,
            /// measured in percent(e.g. <c>'50%'</c>) or pixels (e.g. <c>'10px'</c>).
            /// </summary>
            abstract ``background-offset-x``: PropertyValueNode<U2<float, string>> option with get, set
            /// <summary>
            /// The y offset of the background image,
            /// measured in percent(e.g. <c>'50%'</c>) or pixels (e.g. <c>'10px'</c>).
            /// </summary>
            abstract ``background-offset-y``: PropertyValueNode<U2<float, string>> option with get, set
            /// Changes whether the width is calculated relative to the width of the node or
            /// the width in addition to the padding; may be inner or include-padding.
            /// 
            /// If not specified, include-padding is used by default.
            abstract ``background-width-relative-to``: PropertyValueNode<BackgroundImageBackgroundWidthRelativeToPropertyValueNode> option with get, set
            /// <summary>
            /// Changes whether the height is calculated relative to the height of the node or
            /// the height in addition to the padding; may be <c>inner</c> or <c>include-padding</c>.
            /// 
            /// If not specified, <c>include-padding</c> is used by default.
            /// </summary>
            abstract ``background-height-relative-to``: PropertyValueNode<BackgroundImageBackgroundWidthRelativeToPropertyValueNode> option with get, set
            /// How background image clipping is handled;
            /// may be node for clipped to node shape or none for no clipping.
            abstract ``background-clip``: PropertyValueNode<BackgroundImageBackgroundClipPropertyValueNode> option with get, set
            /// <summary>
            /// Specifies a padding size (e.g. 20) that expands the bounding box of the node in
            /// all directions. This allows for images to be drawn outside of the normal bounding
            /// box of the node when <c>background-clip</c> is none. This is useful for small decorations
            /// just outside of the node.
            /// 
            /// <c>bounds-expansions</c> accepts 1 value (for all directions),
            /// 2 values, ([topAndBottom, leftAndRight]) or 4 values ([top, right, bottom, left]).
            /// </summary>
            abstract ``bounds-expansion``: PropertyValueNode<U4<float, string, U2<float, string> * U2<float, string>, U2<float, string> * U2<float, string> * U2<float, string> * U2<float, string>>> option with get, set

        /// <summary>
        /// The ghost properties allow for creating a ghosting effect, a semitransparent duplicate of the element drawn at an offset.
        /// <see href="https://js.cytoscape.org/#style/ghost" />
        /// </summary>
        type [<AllowNullLiteral>] Ghost =
            /// Whether to use the ghost effect; may be yes or no.
            abstract ghost: PropertyValueNode<BackgroundImageBackgroundImageSmoothingPropertyValueNode> with get, set
            /// The horizontal offset used to position the ghost effect.
            abstract ``ghost-offset-x``: PropertyValueNode<float> with get, set
            /// The vertical offset used to position the ghost effect.
            abstract ``ghost-offset-y``: PropertyValueNode<float> with get, set
            /// The opacity of the ghost effect.
            abstract ``ghost-opacity``: PropertyValueNode<float> with get, set

        /// <summary>
        /// These properties allow you to create pie chart backgrounds on nodes.
        /// Note that 16 slices maximum are supported per node,
        /// so in the properties 1 &lt;= i &lt;= 16.
        /// Of course, you must specify a numerical value for each property in place of i.
        /// Each nonzero sized slice is placed in order of i,
        /// starting from the 12 o’clock position and working clockwise.
        /// 
        /// You may find it useful to reserve a number to a particular
        /// colour for all nodes in your stylesheet.
        /// Then you can specify values for pie-i-background-size
        /// accordingly for each node via a mapper.
        /// This would allow you to create consistently coloured
        /// pie charts in each node of the graph based on element data.
        /// 
        /// <see href="http://js.cytoscape.org/#style/pie-chart-background" />
        /// </summary>
        type [<AllowNullLiteral>] PieChartBackground =
            [<Obsolete("The diameter of the pie, measured as a percent of node size (e.g. 100%) or an absolute length (e.g. 25px).")>]
            abstract ``pie-size``: PropertyValueNode<string> with get, set
            [<Obsolete("The colour of the node’s ith pie chart slice.")>]
            abstract ``pie-i-background-color``: PropertyValueNode<Colour> with get, set
            [<Obsolete("The size of the node’s ith pie chart slice, measured in percent (e.g. 25% or 25).")>]
            abstract ``pie-i-background-size``: PropertyValueNode<float> with get, set
            [<Obsolete("The opacity of the node’s ith pie chart slice.")>]
            abstract ``pie-i-background-opacity``: PropertyValueNode<float> with get, set

        type [<AllowNullLiteral>] Edge =
            inherit EdgeLine
            inherit EdgeArrow
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj
            inherit obj

        /// <summary>
        /// These properties affect the styling of an edge’s line:
        /// 
        /// <see href="http://js.cytoscape.org/#style/edge-line" />
        /// </summary>
        type [<AllowNullLiteral>] EdgeLine =
            /// The width of an edge’s line.
            abstract width: PropertyValueEdge<U2<float, string>> option with get, set
            /// The curving method used to separate two or more edges between two nodes;
            /// may be
            ///   - haystack (default, very fast, bundled straight edges for which loops and compounds are unsupported),
            ///   - bezier(bundled curved edges),
            ///   - unbundled - bezier(curved edges for use with manual control points), or
            ///   - segments (a series of straight lines).
            /// Note that haystack edges work best with ellipse, rectangle, or similar nodes.
            /// Smaller node shapes, like triangle, will not be as aesthetically pleasing.
            /// Also note that edge arrows are unsupported for haystack edges.
            abstract ``curve-style``: PropertyValueEdge<EdgeLineCurveStylePropertyValueEdge> option with get, set
            /// The colour of the edge’s line.
            abstract ``line-color``: PropertyValueEdge<Colour> option with get, set
            /// The style of the edge’s line.
            abstract ``line-style``: PropertyValueEdge<LineStyle> option with get, set
            /// The cap of the edge's line.
            abstract ``line-cap``: PropertyValueEdge<EdgeLineLineCapPropertyValueEdge> option with get, set
            /// The filling style of the edge's line.
            abstract ``line-fill``: PropertyValueEdge<EdgeLineLineFillPropertyValueEdge> option with get, set
            /// <summary>
            /// The opacity of the edge’s line and arrow. Useful if you wish to have a separate opacity for the edge
            /// label versus the edge line. Note that the opacity value of the edge element affects the effective
            /// opacity of its line and label subcomponents.
            /// 
            /// Value between <c>0</c> and <c>1</c> inclusive.
            /// </summary>
            abstract ``line-opacity``: PropertyValueEdge<float> option with get, set
            /// The dashed line pattern which specifies alternating lengths of lines and gaps.
            abstract ``line-dash-pattern``: Array<PropertyValueEdge<float>> option with get, set
            /// The dashed line offset.
            abstract ``line-dash-offset``: PropertyValueEdge<float> option with get, set
            /// The distance the edge ends from its target.
            abstract ``target-distance-from-node``: PropertyValueEdge<float> option with get, set
            /// The distance the edge ends from its source.
            abstract ``source-distance-from-node``: PropertyValueEdge<float> option with get, set

        /// <summary>
        /// These properties specify the gradient colouration of an edge's line:
        /// 
        /// <see href="https://js.cytoscape.org/#style/gradient" />
        /// </summary>
        type [<AllowNullLiteral>] Gradient =
            /// The colors of the gradient stops.
            abstract ``line-gradient-stop-colors``: Array<PropertyValueEdge<Colour>> option with get, set
            /// The positions of the gradient stops.
            /// If not specified (or invalid), the stops will divide equally.
            abstract ``line-gradient-stop-positions``: Array<PropertyValueEdge<float>> option with get, set

        /// <summary>
        /// For automatic, bundled bezier edges (curve - style: bezier):
        /// 
        /// <see href="http://js.cytoscape.org/#style/bezier-edges" />
        /// </summary>
        type [<AllowNullLiteral>] BezierEdges =
            /// From the line perpendicular from source to target,
            /// this value specifies the distance between successive bezier edges.
            abstract ``control-point-step-size``: PropertyValueEdge<float> with get, set
            /// A single value that overrides "control-point-step-size" with a manual value.
            /// Because it overrides the step size, bezier edges with the same value will overlap.
            /// Thus, it’s best to use this as a one- off value for particular edges if need be.
            abstract ``control-point-distance``: PropertyValueEdge<float> with get, set
            /// A single value that weights control points along the line from source to target.
            /// The value usually ranges on [0, 1], with
            /// 0 towards the source node and
            /// 1 towards the target node —
            /// but larger or smaller values can also be used.
            abstract ``control-point-weight``: PropertyValueEdge<float> with get, set
            /// With value intersection (default),
            /// the line from source to target for "control-point-weight" is
            /// from the outside of the source node’s shape to the outside of
            /// the target node’s shape.With value node- position,
            /// the line is from the source position to the target position.
            /// The "node-position" option makes calculating edge points easier
            /// — but it should be used carefully because you can create invalid
            /// points that intersection would have automatically corrected.
            abstract ``edge-distances``: PropertyValueEdge<BezierEdgesEdgeDistancesPropertyValueEdge> with get, set

        /// <summary>
        /// Loop edges
        /// For loops (i.e. same source and target)
        /// 
        /// <see href="https://js.cytoscape.org/#style/loop-edges" />
        /// </summary>
        type [<AllowNullLiteral>] LoopEdges =
            /// <summary>
            /// Determines the angle that loops extend from the node in cases when the source and
            /// target node of an edge is the same. The angle is specified from the 12 o’clock
            /// position and it progresses clockwise for increasing positive values.
            /// The default is <c>-45deg</c> (extending to the upper left).
            /// </summary>
            abstract ``loop-direction``: PropertyValueEdge<string> with get, set
            /// <summary>
            /// Determines the angle between the leaving and returning edges in loops. Positive
            /// values result in clockwise looping and negative values result in counter-clockwise
            /// looping. Default is <c>-90deg</c>.
            /// </summary>
            abstract ``loop-sweep``: PropertyValueEdge<string> with get, set

        /// <summary>
        /// Unbundled bezier edges
        /// For bezier edges with manual control points (curve - style: unbundled - bezier):
        /// 
        /// <see href="http://js.cytoscape.org/#style/unbundled-bezier-edges" />
        /// </summary>
        type [<AllowNullLiteral>] UnbundledBezierEdges =
            /// A series of values that specify for each control point the
            /// distance perpendicular to a line formed
            /// from source to target, e.g. -20 20 - 20.
            abstract ``control-point-distances``: PropertyValueEdge<U3<float, ResizeArray<float>, string>> with get, set
            /// A series of values that weights control points along
            /// a line from source to target, e.g. 0.25 0.5 0.75.
            /// A value usually ranges on [0, 1], with
            /// 0 towards the source node and
            /// 1 towards the target node
            /// — but larger or smaller values can also be used.
            abstract ``control-point-weights``: PropertyValueEdge<U3<float, ResizeArray<float>, string>> with get, set
            /// With value intersection (default),
            /// the line from source to target for "control-point-weights"
            /// is from the outside of the source node’s shape to the
            /// outside of the target node’s shape.
            /// With value
            /// "node-position", the line is from the source position to the target position.
            /// The "node-position" option makes calculating edge points easier
            /// — but it should be used carefully because you can create
            /// invalid points that intersection would have automatically corrected.
            abstract ``edge-distances``: PropertyValueEdge<BezierEdgesEdgeDistancesPropertyValueEdge> with get, set

        /// <summary>
        /// Haystack edges
        /// Loop edges and compound parent nodes are not supported by haystack edges.
        /// Haystack edges are a more performant replacement for plain, straight line edges.
        /// 
        /// For fast, straight line edges (curve - style: haystack):
        /// <see href="http://js.cytoscape.org/#style/haystack-edges" />
        /// </summary>
        type [<AllowNullLiteral>] HaystackEdges =
            /// A value between 0 and 1 inclusive that indicates the relative radius used to position haystack edges on their connected nodes.
            /// The outside of the node is at 1, and the centre of the node is at 0.
            abstract ``haystack-radius``: PropertyValueEdge<float> with get, set

        /// <summary>
        /// Segments edges
        /// For edges made of several straight lines (curve - style: segments):
        /// <see href="http://js.cytoscape.org/#style/segments-edges" />
        /// </summary>
        type [<AllowNullLiteral>] SegmentsEdges =
            /// A series of values that specify for each segment point the distance perpendicular to a line formed from source to target, e.g. -20 20 - 20.
            abstract ``segment-distances``: PropertyValueEdge<U3<float, ResizeArray<float>, string>> with get, set
            /// A series of values that weights segment points along a line from source to target,
            /// e.g. 0.25 0.5 0.75.A value usually ranges on [0, 1],
            /// with 0 towards the source node and 1 towards the target node — but larger or smaller values can also be used.
            abstract ``segment-weights``: PropertyValueEdge<U3<float, ResizeArray<float>, string>> with get, set
            /// With value
            ///   * "intersection" (default), the line from source to target
            ///   * for "segment-weights" is from the outside of the source node’s shape to the outside of the target node’s shape.
            ///   * With value "node-position", the line is from the source position to the target position.
            /// The "node-position" option makes calculating edge points easier
            /// — but it should be used carefully because you can create
            /// invalid points that intersection would have automatically corrected.
            abstract ``edge-distances``: PropertyValueEdge<BezierEdgesEdgeDistancesPropertyValueEdge> with get, set

        /// <summary>
        /// Taxi edges
        /// For hierarchical, bundled edges (curve-style: taxi)
        /// 
        /// <see href="https://js.cytoscape.org/#style/taxi-edges" />
        /// </summary>
        type [<AllowNullLiteral>] TaxiEdges =
            /// <summary>
            /// The main direction of the edge, the direction starting out from the source node; may be one of:
            ///   * <c>auto</c>: Automatically use <c>vertical</c> or <c>horizontal</c>, based on whether the vertical or horizontal distance is largest.
            ///   * <c>vertical</c>: Automatically use <c>downward</c> or <c>upward</c>, based on the vertical direction from source to target.
            ///   * <c>downward</c>: Bundle outgoers downwards.
            ///   * <c>upward</c>: Bundle outgoers upwards.
            ///   * <c>horizontal</c>: Automatically use <c>righward</c> or <c>leftward</c>, based on the horizontal direction from source to target.
            ///   * <c>rightward</c>: Bundle outgoers righwards.
            ///   * <c>leftward</c>: Bundle outgoers leftwards.
            /// </summary>
            abstract ``taxi-direction``: PropertyValueEdge<TaxiEdgesTaxiDirectionPropertyValueEdge> with get, set
            /// <summary>
            /// The distance along the primary axis where the first turn is applied.
            ///   * This value may be an absolute distance (e.g. <c>'20px'</c>) or it may be a relative distance
            /// between the source and target (e.g. <c>'50%'</c>).
            ///   * A negative value may be specified to indicate a distance in the oppostite, target to
            /// source direction (e.g. <c>'-20px'</c>).
            ///   * Note that bundling may not work with an explicit direction (upward, downward, leftward, or rightward)
            /// in tandem with a turn distance specified in percent units.
            /// </summary>
            abstract ``taxi-turn``: PropertyValueEdge<U3<float, ResizeArray<float>, string>> with get, set
            /// <summary>
            /// The minimum distance along the primary axis that is maintained between the nodes and the turns.
            ///   * This value only takes on absolute values (e.g. <c>'5px'</c>).
            ///   * This property makes the taxi edge be re-routed when the turns would be otherwise too close to
            /// the source or target. As such, it also helps to avoid turns overlapping edge endpoint arrows.
            /// </summary>
            abstract ``taxi-turn-min-distance``: PropertyValueEdge<U2<float, string>> with get, set
            /// <summary>
            /// With value <c>intersection</c> (default), the <c>distances</c> (<c>taxi-turn</c> and <c>taxi-turn-min-distance</c>)
            /// are considered from the outside of the source’s bounds to the outside of the target’s bounds.
            /// With value <c>node-position</c>, the distances are considered from the source position to the target position.
            /// The <c>node-position</c> option makes calculating edge points easier — but it should be used carefully because
            /// you can create invalid points that <c>intersection</c> would have automatically corrected.
            /// </summary>
            abstract ``edge-distances``: PropertyValueEdge<BezierEdgesEdgeDistancesPropertyValueEdge> with get, set

        type [<StringEnum>] [<RequireQualifiedAccess>] ArrowShape =
            | Tee
            | Vee
            | Triangle
            | [<CompiledName "triangle-tee">] TriangleTee
            | [<CompiledName "circle-triangle">] CircleTriangle
            | [<CompiledName "triangle-cross">] TriangleCross
            | [<CompiledName "triangle-backcurve">] TriangleBackcurve
            | Square
            | Circle
            | Diamond
            | Chevron
            | None

        type [<StringEnum>] [<RequireQualifiedAccess>] ArrowFill =
            | Filled
            | Hollow

        /// <summary>
        /// Edge arrow
        ///   * &lt;pos&gt;-arrow-color : The colour of the edge’s source arrow.
        ///   * &lt;pos&gt;-arrow-shape : The shape of the edge’s source arrow.
        ///   * &lt;pos&gt;-arrow-fill : The fill state of the edge’s source arrow.
        /// 
        /// For each edge arrow property above, replace &lt;pos&gt; with one of
        ///   * source : Pointing towards the source node, at the end of the edge.
        ///   * mid-source : Pointing towards the source node, at the middle of the edge.
        ///   * target : Pointing towards the target node, at the end of the edge.
        ///   * mid-target: Pointing towards the target node, at the middle of the edge.
        /// 
        /// Only mid arrows are supported on haystack edges.
        /// <see href="http://js.cytoscape.org/#style/edge-arrow" />
        /// </summary>
        type [<AllowNullLiteral>] EdgeArrow =
            /// The size of the arrow.
            abstract ``arrow-scale``: PropertyValueEdge<float> option with get, set
            /// The colour of the edge’s source arrow.
            abstract ``source-arrow-color``: PropertyValueEdge<Colour> option with get, set
            /// The colour of the edge’s "mid-source" arrow.
            abstract ``mid-source-arrow-color``: PropertyValueEdge<Colour> option with get, set
            /// The colour of the edge’s target arrow.
            abstract ``target-arrow-color``: PropertyValueEdge<Colour> option with get, set
            /// The colour of the edge’s "mid-target" arrow.
            abstract ``mid-target-arrow-color``: PropertyValueEdge<Colour> option with get, set
            /// The shape of the edge’s source arrow.
            abstract ``source-arrow-shape``: PropertyValueEdge<ArrowShape> option with get, set
            /// The shape of the edge’s mid-source arrow.
            abstract ``mid-source-arrow-shape``: PropertyValueEdge<ArrowShape> option with get, set
            /// The shape of the edge’s target arrow.
            abstract ``target-arrow-shape``: PropertyValueEdge<ArrowShape> option with get, set
            /// The shape of the edge’s mid-target arrow.
            abstract ``mid-target-arrow-shape``: PropertyValueEdge<ArrowShape> option with get, set
            /// The fill state of the edge’s source arrow.
            abstract ``source-arrow-fill``: PropertyValueEdge<ArrowFill> option with get, set
            /// The fill state of the edge’s mid-source arrow.
            abstract ``mid-source-arrow-fill``: PropertyValueEdge<ArrowFill> option with get, set
            /// The fill state of the edge’s target arrow.
            abstract ``target-arrow-fill``: PropertyValueEdge<ArrowFill> option with get, set
            /// The fill state of the edge’s mid-target arrow.
            abstract ``mid-target-arrow-fill``: PropertyValueEdge<ArrowFill> option with get, set

        /// <summary><see href="https://js.cytoscape.org/#style/edge-endpoints" /></summary>
        type [<AllowNullLiteral>] EdgeEndpoints<'SingularType when 'SingularType :> EdgeSingular> =
            /// Specifies the endpoint of the source side of the edge
            abstract ``source-endpoint``: PropertyValue<'SingularType, U2<string, string>> with get, set
            /// Specifies the endpoint of the target side of the edge
            abstract ``target-endpoint``: PropertyValue<'SingularType, U2<string, string>> with get, set

        /// <summary><see href="http://js.cytoscape.org/#style/visibility" /></summary>
        type [<AllowNullLiteral>] Visibility<'SingularType> =
            /// Whether to display the element; may be element for displayed or none for not displayed.
            /// Note that a "display: none" bezier edge does not take up space in its bundle.
            abstract display: PropertyValue<'SingularType, VisibilityDisplayPropertyValue> with get, set
            /// Whether the element is visible; may be visible or hidden.
            /// Note that a "visibility : hidden" bezier edge still takes up space in its bundle.
            abstract visibility: PropertyValue<'SingularType, VisibilityVisibilityPropertyValue> with get, set
            /// The opacity of the element, ranging from 0 to 1.
            /// Note that the opacity of a compound node parent affects the effective opacity of its children.
            abstract opacity: PropertyValue<'SingularType, float> with get, set
            /// An integer value that affects the relative draw order of elements.
            /// In general, an element with a higher "z-index" will be drawn on top of an element with a lower "z-index".
            /// Note that edges are under nodes despite "z-index", except when necessary for compound nodes.
            abstract ``z-index``: PropertyValue<'SingularType, float> with get, set

        /// <summary><see href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-style" /></summary>
        type [<StringEnum>] [<RequireQualifiedAccess>] FontStyle =
            | Normal
            | Italic
            | Oblique

        /// <summary><see href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight" /></summary>
        type FontWeight =
            U2<float, string>

        /// <summary><see href="http://js.cytoscape.org/#style/labels" /></summary>
        type [<StringEnum>] [<RequireQualifiedAccess>] TextTranformation =
            | None
            | Uppercase
            | Lowercase

        /// <summary>
        /// Labels
        /// Label text:
        /// 
        /// <see href="http://js.cytoscape.org/#style/labels" />
        /// </summary>
        type [<AllowNullLiteral>] Labels<'SingularType> =
            /// The text to display for an element’s label.
            abstract label: PropertyValue<'SingularType, string> with get, set
            /// The text to display for an edge’s source label.
            abstract ``source-label``: PropertyValue<'SingularType, string> with get, set
            /// The text to display for an edge’s target label.
            abstract ``target-label``: PropertyValue<'SingularType, string> with get, set
            /// The colour of the element’s label.
            abstract color: PropertyValue<'SingularType, Colour> with get, set
            /// The opacity of the label text, including its outline.
            abstract ``text-opacity``: PropertyValue<'SingularType, float> with get, set
            /// A comma-separated list of font names to use on the label text.
            abstract ``font-family``: PropertyValue<'SingularType, string> with get, set
            /// <summary>
            /// The size of the label text.
            /// <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family" />
            /// </summary>
            abstract ``font-size``: PropertyValue<'SingularType, U2<float, string>> with get, set
            /// <summary>
            /// A CSS font style to be applied to the label text.
            /// <see href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-style" />
            /// </summary>
            abstract ``font-style``: PropertyValue<'SingularType, FontStyle> with get, set
            /// A CSS font weight to be applied to the label text.
            abstract ``font-weight``: PropertyValue<'SingularType, FontWeight> with get, set
            /// A transformation to apply to the label text.
            abstract ``text-transform``: PropertyValue<'SingularType, TextTranformation> with get, set
            /// A wrapping style to apply to the label text; may be
            ///   * "none" for no wrapping (including manual newlines ) or
            ///   * "wrap" for manual and/ or autowrapping.
            ///   * "ellipsis" to truncate the string and append
            abstract ``text-wrap``: PropertyValue<'SingularType, LabelsTextWrapPropertyValue> with get, set
            /// The maximum width for wrapped text,
            /// applied when "text-wrap" is set to wrap.
            /// For only manual newlines (i.e.\n), set a very large
            /// value like 1000px such that only your newline characters would apply.
            abstract ``text-max-width``: PropertyValue<'SingularType, string> with get, set
            /// <summary>
            /// The characters that may be used for possible wrapping locations when
            /// a line overflows <c>text-max-width</c>; may be <c>whitespace</c> (default) or <c>anywhere</c>.
            /// Note that anywhere is suited to CJK, where the characters are in a grid
            /// and no whitespace exists. Using anywhere with text in the Latin alphabet,
            /// for example, will split words at arbitrary locations.
            /// </summary>
            abstract ``text-overflow-wrap``: PropertyValue<'SingularType, LabelsTextOverflowWrapPropertyValue> with get, set
            /// <summary>
            /// The justification of multiline (wrapped) labels; may be
            /// <c>left</c>, <c>center</c>, <c>right</c>, or <c>auto</c> (default). The auto value makes it so that a
            /// node’s label is justified along the node — e.g. a label on the right side
            /// of a node is left justified.
            /// </summary>
            abstract ``text-justification``: PropertyValue<'SingularType, LabelsTextJustificationPropertyValue> with get, set
            /// <summary>
            /// The line height of multiline text, as a relative, unitless value. It specifies the
            /// vertical spacing between each line. With value <c>1</c> (default), the lines are stacked
            /// directly on top of one another with no additional whitespace between them.
            /// With value <c>2</c>, for example, there is whitespace between each line equal to the visible
            /// height of a line of text.
            /// </summary>
            abstract ``line-height``: PropertyValue<'SingularType, float> with get, set
            /// The vertical alignment of a node’s label.
            abstract ``text-halign``: PropertyValue<'SingularType, LabelsTextHalignPropertyValue> with get, set
            /// The vertical alignment of a node’s label.
            abstract ``text-valign``: PropertyValue<'SingularType, LabelsTextValignPropertyValue> with get, set
            /// For the source label of an edge, how far from the source node the label should be placed.
            abstract ``source-text-offset``: PropertyValue<'SingularType, float> with get, set
            /// For the target label of an edge, how far from the target node the label should be placed.
            abstract ``target-text-offset``: PropertyValue<'SingularType, float> with get, set
            /// A margin that shifts the label along the x- axis.
            abstract ``text-margin-x``: PropertyValue<'SingularType, float> with get, set
            /// A margin that shifts the label along the y- axis.
            abstract ``text-margin-y``: PropertyValue<'SingularType, float> with get, set
            /// (For the source label of an edge.)
            abstract ``source-text-margin-x``: PropertyValue<'SingularType, float> with get, set
            /// (For the source label of an edge.)
            abstract ``source-text-margin-y``: PropertyValue<'SingularType, float> with get, set
            /// (For the target label of an edge.)
            abstract ``target-text-margin-x``: PropertyValue<'SingularType, float> with get, set
            /// (For the target label of an edge.)
            abstract ``target-text-margin-y``: PropertyValue<'SingularType, float> with get, set
            /// <summary>
            /// A rotation angle that is applied to the label.
            ///   * Rotations are clockwise.
            ///   * For edges, the special value <c>autorotate</c> can be used to align the label to the edge.
            ///   * For nodes, the label is rotated along its anchor point on the node, so a label margin may help for some usecases.
            ///   * The special value <c>none</c> can be used to denote 0deg.
            ///   * Rotations works best with left-to-right text.
            /// </summary>
            abstract ``text-rotation``: PropertyValue<'SingularType, U2<float, string>> with get, set
            /// (For the source label of an edge.)
            abstract ``source-text-rotation``: PropertyValue<'SingularType, U2<float, string>> with get, set
            /// (For the target label of an edge.)
            abstract ``target-text-rotation``: PropertyValue<'SingularType, U2<float, string>> with get, set
            /// The colour of the outline around the element’s label text.
            abstract ``text-outline-color``: PropertyValue<'SingularType, Colour> with get, set
            /// The opacity of the outline on label text.
            abstract ``text-outline-opacity``: PropertyValue<'SingularType, float> with get, set
            /// The size of the outline on label text.
            abstract ``text-outline-width``: PropertyValue<'SingularType, U2<float, string>> with get, set
            /// The padding provides visual spacing between the text and the edge of the background.
            abstract ``text-background-padding``: PropertyValue<'SingularType, string> with get, set
            /// A colour to apply on the text background.
            abstract ``text-background-color``: PropertyValue<'SingularType, Colour> with get, set
            /// The opacity of the label background; the background is disabled for 0 (default value).
            abstract ``text-background-opacity``: PropertyValue<'SingularType, float> with get, set
            /// The shape to use for the label background.
            abstract ``text-background-shape``: PropertyValue<'SingularType, LabelsTextBackgroundShapePropertyValue> with get, set
            /// The width of the border around the label; the border is disabled for 0 (default value).
            abstract ``text-border-opacity``: PropertyValue<'SingularType, float> with get, set
            /// The width of the border around the label.
            abstract ``text-border-width``: PropertyValue<'SingularType, float> with get, set
            /// The style of the border around the label.
            abstract ``text-border-style``: PropertyValue<'SingularType, LineStyle> with get, set
            /// The colour of the border around the label.
            abstract ``text-border-color``: PropertyValue<'SingularType, Colour> with get, set
            /// If zooming makes the effective font size of the label smaller than this,
            /// then no label is shown.Note that because of performance optimisations,
            /// the label may be shown at font sizes slightly smaller than this value.
            /// 
            /// This effect is more pronounced at larger screen pixel ratios.However,
            /// it is guaranteed that the label will be shown at sizes equal to or greater than the value specified.
            abstract ``min-zoomed-font-size``: PropertyValue<'SingularType, float> with get, set
            /// <summary>
            /// Whether events should occur on an element if the label receives an event; may be <c>yes</c> or <c>no</c>.
            /// You may want a style applied to the text on active so you know the text is activatable.
            /// </summary>
            abstract ``text-events``: PropertyValue<'SingularType, BackgroundImageBackgroundImageSmoothingPropertyValueNode> with get, set

        /// <summary><see href="http://js.cytoscape.org/#style/events" /></summary>
        type [<AllowNullLiteral>] Events<'SingularType> =
            /// Whether events should occur on an element (e.g.tap, mouseover, etc.).
            ///   * For "no", the element receives no events and events simply pass through to the core/viewport.
            abstract events: PropertyValue<'SingularType, BackgroundImageBackgroundImageSmoothingPropertyValueNode> with get, set
            /// Whether events should occur on an element if the label receives an event.
            /// You may want a style applied to the text on active so you know the text is activatable.
            abstract ``text-events``: PropertyValue<'SingularType, BackgroundImageBackgroundImageSmoothingPropertyValueNode> with get, set

        /// <summary>
        /// These properties allow for the creation of overlays on top of nodes or edges,
        /// and are often used in the :active state.
        /// <see href="http://js.cytoscape.org/#style/overlay" />
        /// </summary>
        type [<AllowNullLiteral>] Overlay =
            /// The colour of the overlay.
            abstract ``overlay-color``: PropertyValueEdge<Colour> with get, set
            /// The area outside of the element within which the overlay is shown.
            abstract ``overlay-padding``: PropertyValueEdge<U2<float, string>> with get, set
            /// The opacity of the overlay.
            abstract ``overlay-opacity``: PropertyValueEdge<float> with get, set

        /// Transition animation
        type [<StringEnum>] [<RequireQualifiedAccess>] TransitionTimingFunction =
            | Linear
            | Spring
            | [<CompiledName "cubic-bezier">] CubicBezier
            | Ease
            | [<CompiledName "ease-in">] EaseIn
            | [<CompiledName "ease-out">] EaseOut
            | [<CompiledName "ease-in-out">] EaseInOut
            | [<CompiledName "ease-in-sine">] EaseInSine
            | [<CompiledName "ease-out-sine">] EaseOutSine
            | [<CompiledName "ease-in-out-sine">] EaseInOutSine
            | [<CompiledName "ease-in-quad">] EaseInQuad
            | [<CompiledName "ease-out-quad">] EaseOutQuad
            | [<CompiledName "ease-in-out-quad">] EaseInOutQuad
            | [<CompiledName "ease-in-cubic">] EaseInCubic
            | [<CompiledName "ease-out-cubic">] EaseOutCubic
            | [<CompiledName "ease-in-out-cubic">] EaseInOutCubic
            | [<CompiledName "ease-in-quart">] EaseInQuart
            | [<CompiledName "ease-out-quart">] EaseOutQuart
            | [<CompiledName "ease-in-out-quart">] EaseInOutQuart
            | [<CompiledName "ease-in-quint">] EaseInQuint
            | [<CompiledName "ease-out-quint">] EaseOutQuint
            | [<CompiledName "ease-in-out-quint">] EaseInOutQuint
            | [<CompiledName "ease-in-expo">] EaseInExpo
            | [<CompiledName "ease-out-expo">] EaseOutExpo
            | [<CompiledName "ease-in-out-expo">] EaseInOutExpo
            | [<CompiledName "ease-in-circ">] EaseInCirc
            | [<CompiledName "ease-out-circ">] EaseOutCirc
            | [<CompiledName "ease-in-out-circ">] EaseInOutCirc

        /// <summary><see href="http://js.cytoscape.org/#style/transition-animation" /></summary>
        type [<AllowNullLiteral>] TransitionAnimation =
            /// A comma separated list of style properties to animate in this state.
            abstract ``transition-property``: string with get, set
            /// The length of the transition in seconds(e.g. 0.5s).
            abstract ``transition-duration``: float with get, set
            /// The length of the delay in seconds before the transition occurs (e.g. 250ms).
            abstract ``transition-delay``: float with get, set
            /// An easing function that controls the animation progress curve (a visualisation of easings serves as a reference).
            abstract ``transition-timing-function``: TransitionTimingFunction with get, set

        /// <summary>
        /// Core
        /// These properties affect UI global to the graph, and apply only to the core.
        /// You can use the special core selector string to set these properties.
        /// <see href="http://js.cytoscape.org/#style/core" />
        /// </summary>
        type [<AllowNullLiteral>] Core =
            /// The colour of the indicator shown when the background is grabbed by the user.
            abstract ``active-bg-color``: PropertyValueCore<Colour> with get, set
            /// The opacity of the active background indicator.
            abstract ``active-bg-opacity``: PropertyValueCore<float> with get, set
            /// The size of the active background indicator.
            abstract ``active-bg-size``: PropertyValueCore<float> with get, set
            /// The background colour of the selection box used for drag selection.
            abstract ``selection-box-color``: PropertyValueCore<Colour> with get, set
            /// The colour of the border on the selection box.
            abstract ``selection-box-border-color``: PropertyValueCore<Colour> with get, set
            /// The size of the border on the selection box.
            abstract ``selection-box-border-width``: PropertyValueCore<float> with get, set
            /// The opacity of the selection box.
            abstract ``selection-box-opacity``: PropertyValueCore<float> with get, set
            /// The colour of the area outside the viewport texture when initOptions.textureOnViewport === true.
            abstract ``outside-texture-bg-color``: PropertyValueCore<Colour> with get, set
            /// The opacity of the area outside the viewport texture.
            abstract ``outside-texture-bg-opacity``: PropertyValueCore<float> with get, set

        type [<StringEnum>] [<RequireQualifiedAccess>] BackgroundImageBackgroundImageCrossoriginPropertyValueNode =
            | Anonymous
            | [<CompiledName "use-credentials">] UseCredentials

        type [<StringEnum>] [<RequireQualifiedAccess>] BackgroundImageBackgroundImageSmoothingPropertyValueNode =
            | Yes
            | No

        type [<StringEnum>] [<RequireQualifiedAccess>] BackgroundImageBackgroundImageContainmentPropertyValueNode =
            | Inside
            | Over

        type [<StringEnum>] [<RequireQualifiedAccess>] BackgroundImageBackgroundFitPropertyValueNode =
            | None
            | Contain
            | Cover

        type [<StringEnum>] [<RequireQualifiedAccess>] BackgroundImageBackgroundRepeatPropertyValueNode =
            | [<CompiledName "no-repeat">] NoRepeat
            | [<CompiledName "repeat-x">] RepeatX
            | [<CompiledName "repeat-y">] RepeatY
            | Repeat

        type [<StringEnum>] [<RequireQualifiedAccess>] BackgroundImageBackgroundWidthRelativeToPropertyValueNode =
            | Inner
            | [<CompiledName "include-padding">] IncludePadding

        type [<StringEnum>] [<RequireQualifiedAccess>] BackgroundImageBackgroundClipPropertyValueNode =
            | Clipped
            | None

        type [<StringEnum>] [<RequireQualifiedAccess>] EdgeLineCurveStylePropertyValueEdge =
            | Haystack
            | Straight
            | Bezier
            | [<CompiledName "unbundled-bezier">] UnbundledBezier
            | Segments
            | Taxi

        type [<StringEnum>] [<RequireQualifiedAccess>] EdgeLineLineCapPropertyValueEdge =
            | Butt
            | Round
            | Square

        type [<StringEnum>] [<RequireQualifiedAccess>] EdgeLineLineFillPropertyValueEdge =
            | Solid
            | [<CompiledName "linear-gradient">] LinearGradient
            | [<CompiledName "radial-gradient">] RadialGradient

        type [<StringEnum>] [<RequireQualifiedAccess>] BezierEdgesEdgeDistancesPropertyValueEdge =
            | Intersection
            | [<CompiledName "node-position">] NodePosition

        type [<StringEnum>] [<RequireQualifiedAccess>] TaxiEdgesTaxiDirectionPropertyValueEdge =
            | Auto
            | Vertical
            | Downward
            | Upward
            | Horizontal
            | Rightward
            | Leftward

        type [<StringEnum>] [<RequireQualifiedAccess>] VisibilityDisplayPropertyValue =
            | None
            | Element

        type [<StringEnum>] [<RequireQualifiedAccess>] VisibilityVisibilityPropertyValue =
            | Hidden
            | Visible

        type [<StringEnum>] [<RequireQualifiedAccess>] LabelsTextWrapPropertyValue =
            | None
            | Wrap
            | Ellipsis

        type [<StringEnum>] [<RequireQualifiedAccess>] LabelsTextOverflowWrapPropertyValue =
            | Whitespace
            | Anywhere

        type [<StringEnum>] [<RequireQualifiedAccess>] LabelsTextJustificationPropertyValue =
            | Auto
            | Left
            | Center
            | Right

        type [<StringEnum>] [<RequireQualifiedAccess>] LabelsTextHalignPropertyValue =
            | Left
            | Center
            | Right

        type [<StringEnum>] [<RequireQualifiedAccess>] LabelsTextValignPropertyValue =
            | Top
            | Center
            | Bottom

        type [<StringEnum>] [<RequireQualifiedAccess>] LabelsTextBackgroundShapePropertyValue =
            | Rectangle
            | Roundrectangle

    /// <summary>
    /// Events passed to handler callbacks are similar to
    /// jQuery event objects in that they wrap native event objects,
    /// mimicking their API.
    /// 
    /// <see href="http://js.cytoscape.org/#events" />
    /// </summary>
    type [<AllowNullLiteral>] EventObject =
        inherit InputEventObject
        inherit LayoutEventObject

    type [<AllowNullLiteral>] EventObjectNode =
        inherit EventObject
        /// indicates the element or core that first caused the event
        abstract target: NodeSingular with get, set

    type [<AllowNullLiteral>] EventObjectEdge =
        inherit EventObject
        /// indicates the element or core that first caused the event
        abstract target: EdgeSingular with get, set

    type [<AllowNullLiteral>] EventObjectCore =
        inherit EventObject
        /// indicates the element or core that first caused the event
        abstract target: Core with get, set

    /// <summary><see href="http://js.cytoscape.org/#events/event-object" /></summary>
    type [<AllowNullLiteral>] AbstractEventObject =
        /// a reference to the corresponding core Core
        abstract cy: Core with get, set
        /// indicates the element or core that first caused the event
        abstract target: obj option with get, set
        /// the event type string (e.g. "tap")
        abstract ``type``: U2<UserInputDeviceEventName, UserInputDeviceEventNameExt> with get, set
        /// the event namespace string (e.g. "foo" for "foo.tap")
        abstract ``namespace``: string with get, set
        /// Unix epoch time of event in milliseconds
        abstract timeStamp: float with get, set
        abstract preventDefault: (unit -> unit) with get, set
        abstract stopPropagation: (unit -> unit) with get, set
        abstract stopImmediatePropagation: (unit -> unit) with get, set
        abstract isDefaultPrevented: (unit -> bool) with get, set
        abstract isPropagationStopped: (unit -> bool) with get, set
        abstract isImmediatePropagationStopped: (unit -> bool) with get, set

    type [<AllowNullLiteral>] InputEventObject =
        inherit AbstractEventObject
        /// position : indicates the model position of the event
        abstract position: Position with get, set
        /// renderedPosition : indicates the rendered position of the event
        abstract renderedPosition: Position with get, set
        /// originalEvent : the original user input device event object
        abstract originalEvent: MouseEvent with get, set

    type [<AllowNullLiteral>] LayoutEventObject =
        inherit AbstractEventObject
        /// layout : indicates the corresponding layout that triggered the event
        /// (useful if running multiple layouts simultaneously)
        abstract layout: obj option with get, set

    /// <summary>
    /// These are normal browser events that you can bind to via Cytoscape.js.
    /// You can bind these events to the core and to collections.
    /// <see href="http://js.cytoscape.org/#events/user-input-device-events" />
    /// </summary>
    type [<StringEnum>] [<RequireQualifiedAccess>] UserInputDeviceEventName =
        | Mousedown
        | Mouseup
        | Click
        | Mouseover
        | Mouseout
        | Mousemove
        | Touchstart
        | Touchmove
        | Touchend

    /// <summary>
    /// There are also some higher level events that you can use
    /// so you don’t have to bind to different events for
    /// mouse-input devices and for touch devices.
    /// <see href="http://js.cytoscape.org/#events/user-input-device-events" />
    /// </summary>
    type [<StringEnum>] [<RequireQualifiedAccess>] UserInputDeviceEventNameExt =
        | Tapstart
        | Vmousedown
        | Tapdrag
        | Vmousemove
        | Tapdragover
        | Tapdragout
        | Tapend
        | Vmouseup
        | Tap
        | Vclick
        | Taphold
        | Cxttapstart
        | Cxttapend
        | Cxttap
        | Cxtdrag
        | Cxtdragover
        | Cxtdragout
        | Boxstart
        | Boxend
        | Boxselect
        | Box

    /// <summary>
    /// These events are custom to Cytoscape.js. You can bind to these events for collections.
    /// <see href="http://js.cytoscape.org/#events/collection-events" />
    /// </summary>
    type [<StringEnum>] [<RequireQualifiedAccess>] CollectionEventName =
        | Add
        | Remove
        | Move
        | Select
        | Unselect
        | Tapselect
        | Tapunselect
        | Boxselect
        | Box
        | Lock
        | Unlock
        | Grabon
        | Grab
        | Drag
        | Free
        | Freeon
        | Dragfree
        | Dragfreeon
        | Position
        | Data
        | Scratch
        | Style
        | Background

    /// <summary>
    /// These events are custom to Cytoscape.js, and they occur on the core.
    /// <see href="http://js.cytoscape.org/#events/graph-events" />
    /// </summary>
    type [<StringEnum>] [<RequireQualifiedAccess>] GraphEventName =
        | Layoutstart
        | Layoutready
        | Layoutstop
        | Ready
        | Destroy
        | Render
        | Pan
        | Dragpan
        | Zoom
        | Pinchzoom
        | Scrollzoom
        | Viewport
        | Resize

    /// <summary>
    /// Layouts
    /// <see href="http://js.cytoscape.org/#layouts" />
    /// 
    /// The function of a layout is to set the positions on the nodes in the graph.
    /// Layouts are extensions of Cytoscape.js such that it is possible for
    /// anyone to write a layout without modifying the library itself.
    /// Several layouts are included with Cytoscape.js by default,
    /// and their options are described in the sections that follow
    /// with the default values specified.
    /// Note that you must set options.name to the name of the
    /// layout to specify which one you want to run.
    /// Each layout has its own algorithm for setting the position for each node.
    /// This algorithm influences the overall shape of the graph and the lengths of the edges.
    /// A layout’s algorithm can be customised by setting its options.
    /// Therefore, edge lengths can be controlled by setting the layout options appropriately.
    /// For force-directed (physics) layouts,
    /// there is generally an option to set a weight to each edge
    /// to affect the relative edge lengths.
    /// Edge length can also be affected by options like spacing
    /// factors, angles, and overlap avoidance.
    /// Setting edge length depends on the particular layout,
    /// and some layouts will allow for more precise edge lengths than others.
    /// </summary>
    type [<AllowNullLiteral>] Layouts =
        inherit LayoutManipulation
        inherit LayoutEvents

    type LayoutOptions =
        obj

    type [<AllowNullLiteral>] LayoutHandler =
        [<Emit "$0($1...)">] abstract Invoke: e: LayoutEventObject -> unit

    type [<AllowNullLiteral>] BaseLayoutOptions =
        abstract name: string with get, set
        abstract ready: LayoutHandler option with get, set
        abstract stop: LayoutHandler option with get, set
        /// <summary>transform a given node position. Useful for changing flow direction in discrete layouts</summary>
        /// <param name="node">The node.</param>
        /// <param name="position">The node position.</param>
        abstract transform: node: NodeSingular * position: Position -> Position

    /// <summary><see href="http://js.cytoscape.org/#layouts/null" /></summary>
    type [<AllowNullLiteral>] NullLayoutOptions =
        abstract name: string with get, set

    type [<AllowNullLiteral>] BoundingBox12 =
        abstract x1: float with get, set
        abstract y1: float with get, set
        abstract x2: float with get, set
        abstract y2: float with get, set

    type [<AllowNullLiteral>] BoundingBoxWH =
        abstract x1: float with get, set
        abstract y1: float with get, set
        abstract w: float with get, set
        abstract h: float with get, set

    type [<AllowNullLiteral>] AnimatedLayoutOptions =
        abstract animate: bool option with get, set
        abstract animationDuration: float option with get, set
        abstract animationEasing: Css.TransitionTimingFunction option with get, set
        /// a function that determines whether the node should be animated.
        /// All nodes animated by default on animate enabled.
        /// Non-animated nodes are positioned immediately when the layout starts
        abstract animateFilter: node: NodeSingular * index: float -> bool

    /// <summary><see href="http://js.cytoscape.org/#layouts/random" /></summary>
    type [<AllowNullLiteral>] RandomLayoutOptions =
        inherit BaseLayoutOptions
        inherit AnimatedLayoutOptions
        abstract name: string with get, set
        abstract fit: bool with get, set
        abstract padding: float option with get, set
        abstract boundingBox: U2<BoundingBox12, BoundingBoxWH> option with get, set

    /// <summary><see href="http://js.cytoscape.org/#layouts/preset" /></summary>
    type [<AllowNullLiteral>] NodePositionMap =
        [<EmitIndexer>] abstract Item: nodeid: string -> Position with get, set

    type [<AllowNullLiteral>] NodePositionFunction =
        [<Emit "$0($1...)">] abstract Invoke: nodeid: string -> Position

    type [<AllowNullLiteral>] PresetLayoutOptions =
        inherit BaseLayoutOptions
        inherit AnimatedLayoutOptions
        abstract name: string with get, set
        abstract positions: U2<NodePositionMap, NodePositionFunction> option with get, set
        abstract zoom: float option with get, set
        abstract pan: float option with get, set
        abstract fit: bool option with get, set
        abstract padding: float option with get, set

    type [<AllowNullLiteral>] SortableNode =
        abstract data: SortableNodeData with get, set

    type [<AllowNullLiteral>] SortingFunction =
        [<Emit "$0($1...)">] abstract Invoke: a: SortableNode * b: SortableNode -> float

    type [<AllowNullLiteral>] ShapedLayoutOptions =
        inherit BaseLayoutOptions
        inherit AnimatedLayoutOptions
        abstract fit: bool with get, set
        abstract padding: float option with get, set
        abstract boundingBox: U2<BoundingBox12, BoundingBoxWH> option with get, set
        abstract avoidOverlap: bool option with get, set
        abstract nodeDimensionsIncludeLabels: bool with get, set
        abstract spacingFactor: float option with get, set
        abstract sort: SortingFunction option with get, set

    /// <summary><see href="http://js.cytoscape.org/#layouts/grid" /></summary>
    type [<AllowNullLiteral>] GridLayoutOptions =
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract avoidOverlapPadding: float option with get, set
        abstract condense: bool with get, set
        abstract rows: float option with get, set
        abstract cols: float option with get, set
        abstract position: node: NodeSingular -> GridLayoutOptionsPositionReturn

    type [<AllowNullLiteral>] GridLayoutOptionsPositionReturn =
        abstract row: float with get, set
        abstract col: float with get, set

    /// <summary><see href="http://js.cytoscape.org/#layouts/circle" /></summary>
    type [<AllowNullLiteral>] CircleLayoutOptions =
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract radius: float option with get, set
        abstract startAngle: float with get, set
        abstract sweep: float option with get, set
        abstract clockwise: bool option with get, set

    /// <summary><see href="http://js.cytoscape.org/#layouts/concentric" /></summary>
    type [<AllowNullLiteral>] ConcentricLayoutOptions =
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract startAngle: float with get, set
        abstract sweep: float option with get, set
        abstract clockwise: bool option with get, set
        abstract equidistant: bool with get, set
        abstract minNodeSpacing: float with get, set
        abstract height: obj with get, set
        abstract width: obj with get, set
        abstract spacingFactor: obj with get, set
        abstract concentric: node: ConcentricLayoutOptionsConcentricNode -> float
        abstract levelWidth: node: ConcentricLayoutOptionsLevelWidthNode -> float

    type [<AllowNullLiteral>] ConcentricLayoutOptionsConcentricNode =
        abstract degree: unit -> float

    type [<AllowNullLiteral>] ConcentricLayoutOptionsLevelWidthNode =
        abstract maxDegree: unit -> float

    /// <summary><see href="http://js.cytoscape.org/#layouts/breadthfirst" /></summary>
    type [<AllowNullLiteral>] BreadthFirstLayoutOptions =
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract directed: bool with get, set
        abstract circle: bool with get, set
        abstract roots: ResizeArray<string> option with get, set
        abstract maximalAdjustments: float with get, set

    /// <summary><see href="http://js.cytoscape.org/#layouts/cose" /></summary>
    type [<AllowNullLiteral>] CoseLayoutOptions =
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract refresh: float with get, set
        abstract randomize: bool with get, set
        abstract componentSpacing: float with get, set
        abstract nodeRepulsion: node: obj option -> float
        abstract nodeOverlap: float with get, set
        abstract idealEdgeLength: edge: obj option -> float
        abstract edgeElasticity: edge: obj option -> float
        abstract nestingFactor: float with get, set
        abstract gravity: float with get, set
        abstract numIter: float with get, set
        abstract initialTemp: float with get, set
        abstract coolingFactor: float with get, set
        abstract minTemp: float with get, set
        abstract weaver: bool with get, set

    /// <summary>
    /// <see href="http://js.cytoscape.org/#layouts/layout-manipulation" />
    /// Layouts have a set of functions available to them,
    /// which allow for more complex behaviour than the primary run-one-layout-at-a-time usecase.
    /// A new, developer accessible layout can be made via cy.makeLayout().
    /// </summary>
    type [<AllowNullLiteral>] LayoutManipulation =
        /// <summary>
        /// Start running the layout
        /// <see href="http://js.cytoscape.org/#layout.run" />
        /// </summary>
        abstract run: unit -> LayoutManipulation
        abstract start: unit -> LayoutManipulation
        /// <summary>
        /// Stop running the (asynchronous/discrete) layout
        /// <see href="http://js.cytoscape.org/#layout.stop" />
        /// </summary>
        abstract stop: unit -> LayoutManipulation

    type [<AllowNullLiteral>] LayoutEvents =
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="data">
        /// [optional] A plain object which is passed to the
        /// handler in the event object argument.
        /// </param>
        /// <param name="handler">
        /// The handler function that is called
        /// when one of the specified events occurs.
        /// </param>
        abstract on: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract on: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        abstract bind: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract bind: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        abstract listen: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract listen: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        abstract addListener: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract addListener: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        /// <summary>
        /// Get a promise that is resolved with the first of any of
        /// the specified events triggered on the layout.
        /// <see href="http://js.cytoscape.org/#layout.promiseOn" />
        /// </summary>
        abstract promiseOn: events: EventNames -> Promise<EventObject>
        abstract pon: events: EventNames -> Promise<EventObject>
        /// <summary>Bind to events that are emitted by the layout, and trigger the handler only once.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="data">[optional] A plain object which is passed to the handler in the event object argument.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        abstract one: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract one: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        /// <summary>
        /// Remove event handlers on the layout.
        /// <see href="http://js.cytoscape.org/#layout.off" />
        /// </summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">[optional] A reference to the handler function to remove.</param>
        abstract off: events: EventNames * ?handler: EventHandler -> LayoutEvents
        abstract unbind: events: EventNames * ?handler: EventHandler -> LayoutEvents
        abstract unlisten: events: EventNames * ?handler: EventHandler -> LayoutEvents
        abstract removeListener: events: EventNames * ?handler: EventHandler -> LayoutEvents
        /// <summary>
        /// Trigger one or more events on the layout.
        /// <see href="http://js.cytoscape.org/#layout.trigger" />
        /// </summary>
        /// <param name="events">A space separated list of event names to trigger.</param>
        /// <param name="extraParams">[optional] An array of additional parameters to pass to the handler.</param>
        abstract trigger: events: EventNames * ?extraParams: ResizeArray<obj option> -> LayoutEvents

    /// <summary><see href="http://js.cytoscape.org/#animations/animation-manipulation" /></summary>
    type [<AllowNullLiteral>] AnimationManipulation =
        /// <summary>
        /// Requests that the animation be played, starting on the next frame.
        /// If the animation is complete, it restarts from the beginning.
        /// <see href="http://js.cytoscape.org/#ani.play" />
        /// </summary>
        abstract play: unit -> AnimationManipulation
        /// <summary>
        /// Get whether the animation is currently playing.
        /// <see href="http://js.cytoscape.org/#ani.playing" />
        /// </summary>
        abstract playing: unit -> bool
        /// Get the progress of the animation in percent.
        abstract progress: unit -> float
        /// <summary>Set the progress of the animation in percent.</summary>
        /// <param name="progress">The progress in percent (i.e. between 0 and 1 inclusive) to set to the animation.</param>
        abstract progress: progress: float -> AnimationManipulation
        /// Get the progress of the animation in milliseconds.
        abstract time: unit -> float
        /// <summary>Set the progress of the animation in milliseconds.</summary>
        /// <param name="time">
        /// The progress in milliseconds
        /// (i.e. between 0 and the duration inclusive) to set to the animation.
        /// </param>
        abstract time: time: float -> AnimationManipulation
        /// Rewind the animation to the beginning.
        abstract rewind: unit -> AnimationManipulation
        /// Fastforward the animation to the end.
        abstract fastforward: unit -> AnimationManipulation
        /// <summary>
        /// Pause the animation, maintaining the current progress.
        /// <see href="http://js.cytoscape.org/#ani.pause" />
        /// </summary>
        abstract pause: unit -> AnimationManipulation
        /// <summary>
        /// Stop the animation, maintaining the current progress
        /// and removing the animation from any associated queues.
        /// <see href="http://js.cytoscape.org/#ani.stop" />
        /// </summary>
        abstract stop: unit -> AnimationManipulation
        /// <summary>
        /// Get whether the animation has progressed to the end.
        /// <see href="http://js.cytoscape.org/#ani.completed" />
        /// </summary>
        abstract completed: unit -> AnimationManipulation
        abstract complete: unit -> AnimationManipulation
        /// <summary>
        /// Apply the animation at its current progress.
        /// <see href="http://js.cytoscape.org/#ani.apply" />
        /// </summary>
        abstract apply: unit -> AnimationManipulation
        /// <summary>
        /// Get whether the animation is currently applying.
        /// <see href="http://js.cytoscape.org/#ani.applying" />
        /// </summary>
        abstract applying: unit -> AnimationManipulation
        /// <summary>
        /// Reverse the animation such that its starting
        /// conditions and ending conditions are reversed.
        /// <see href="http://js.cytoscape.org/#ani.reverse" />
        /// </summary>
        abstract reverse: unit -> AnimationManipulation
        /// <summary>Get a promise that is fulfilled with the specified animation event.</summary>
        /// <param name="animationEvent">
        /// A string for the event name; completed or complete for
        /// completing the animation or frame for the next frame of the animation.
        /// <see href="http://js.cytoscape.org/#ani.promise" />
        /// </param>
        abstract promise: ?animationEvent: AnimationManipulationPromiseAnimationEvent -> Promise<EventObject>

    type [<StringEnum>] [<RequireQualifiedAccess>] AnimationManipulationPromiseAnimationEvent =
        | Completed
        | Complete
        | Frame

    /// <summary>
    /// Cytoscape extension type
    /// Definition of an extension would be in following form:
    /// </summary>
    /// <example>
    /// declare module 'cytoscape-ext' {
    ///  const ext: cytoscape.Ext;
    ///  export = ext;
    /// }
    /// </example>
    type [<AllowNullLiteral>] Ext =
        /// <summary>
        /// Cytoscape extension type
        /// Definition of an extension would be in following form:
        /// </summary>
        /// <example>
        /// declare module 'cytoscape-ext' {
        ///  const ext: cytoscape.Ext;
        ///  export = ext;
        /// }
        /// </example>
        [<Emit "$0($1...)">] abstract Invoke: cytoscape: ((CytoscapeOptions) option -> Core) -> unit

    type [<StringEnum>] [<RequireQualifiedAccess>] ExportStringOptionsOutput =
        | Base64uri
        | Base64

    type [<StringEnum>] [<RequireQualifiedAccess>] ExportBlobOptionsOutput =
        | Blob

    type [<StringEnum>] [<RequireQualifiedAccess>] ExportBlobPromiseOptionsOutput =
        | [<CompiledName "blob-promise">] BlobPromise

    type [<AllowNullLiteral>] ElementAnimateOptionsBaseStyle =
        [<EmitIndexer>] abstract Item: name: string -> obj option with get, set

    type [<AllowNullLiteral>] SortableNodeData =
        abstract weight: float with get, set